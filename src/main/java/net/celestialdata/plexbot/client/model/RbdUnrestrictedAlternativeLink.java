/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package net.celestialdata.plexbot.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.net.URI;
import java.util.Objects;

/**
 * Alternative download links for an unrestricted link on Real-Debrid.
 */
@SuppressWarnings("unused")
@ApiModel(
        description =
                "Alternative download links for an unrestricted link on Real-Debrid.")
@javax.annotation.
        Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2021-02-18T23:30:04.504837-06:00[America/Chicago]")
public class RbdUnrestrictedAlternativeLink {
    public static final String SERIALIZED_NAME_ID = "id";
    public static final String SERIALIZED_NAME_FILENAME = "filename";
    public static final String SERIALIZED_NAME_DOWNLOAD = "download";
    public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
    public static final String SERIALIZED_NAME_TYPE = "type";
    @SerializedName(SERIALIZED_NAME_ID)
    private String id;
    @SerializedName(SERIALIZED_NAME_FILENAME)
    private String filename;
    @SerializedName(SERIALIZED_NAME_DOWNLOAD)
    private URI download;
    @SerializedName(SERIALIZED_NAME_MIME_TYPE)
    private String mimeType;
    @SerializedName(SERIALIZED_NAME_TYPE)
    private String type;

    @SuppressWarnings("unused")
    public RbdUnrestrictedAlternativeLink id(String id) {

        this.id = id;
        return this;
    }

    /**
     * Unrestricted Link ID
     *
     * @return id
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Unrestricted Link ID")

    public String getId() {
        return id;
    }

    @SuppressWarnings("unused")
    public void setId(String id) {
        this.id = id;
    }

    @SuppressWarnings("unused")
    public RbdUnrestrictedAlternativeLink filename(String filename) {

        this.filename = filename;
        return this;
    }

    /**
     * File Name
     *
     * @return filename
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "File Name")

    public String getFilename() {
        return filename;
    }

    @SuppressWarnings("unused")
    public void setFilename(String filename) {
        this.filename = filename;
    }

    @SuppressWarnings("unused")
    public RbdUnrestrictedAlternativeLink download(URI download) {

        this.download = download;
        return this;
    }

    /**
     * Download Link
     *
     * @return download
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Download Link")

    public URI getDownload() {
        return download;
    }

    @SuppressWarnings("unused")
    public void setDownload(URI download) {
        this.download = download;
    }

    @SuppressWarnings("unused")
    public RbdUnrestrictedAlternativeLink mimeType(String mimeType) {

        this.mimeType = mimeType;
        return this;
    }

    /**
     * Type of file, generally based off its extension
     *
     * @return mimeType
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Type of file, generally based off its extension")

    public String getMimeType() {
        return mimeType;
    }

    @SuppressWarnings("unused")
    public void setMimeType(String mimeType) {
        this.mimeType = mimeType;
    }

    @SuppressWarnings("unused")
    public RbdUnrestrictedAlternativeLink type(String type) {

        this.type = type;
        return this;
    }

    /**
     * Type of file, generally based off its quality
     *
     * @return type
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Type of file, generally based off its quality")

    public String getType() {
        return type;
    }

    @SuppressWarnings("unused")
    public void setType(String type) {
        this.type = type;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RbdUnrestrictedAlternativeLink rbdUnrestrictedAlternativeLink =
                (RbdUnrestrictedAlternativeLink) o;
        return Objects.equals(this.id, rbdUnrestrictedAlternativeLink.id) &&
                Objects.equals(this.filename,
                        rbdUnrestrictedAlternativeLink.filename) &&
                Objects.equals(this.download,
                        rbdUnrestrictedAlternativeLink.download) &&
                Objects.equals(this.mimeType,
                        rbdUnrestrictedAlternativeLink.mimeType) &&
                Objects.equals(this.type, rbdUnrestrictedAlternativeLink.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, filename, download, mimeType, type);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RbdUnrestrictedAlternativeLink {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
        sb.append("    download: ").append(toIndentedString(download)).append("\n");
        sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
