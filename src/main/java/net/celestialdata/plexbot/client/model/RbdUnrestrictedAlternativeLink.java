/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.celestialdata.plexbot.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import javax.annotation.processing.Generated;
import java.util.Objects;

/**
 * Alternative download links for an unrestricted link on Real-Debrid.
 */
@Schema(description = "Alternative download links for an unrestricted link on Real-Debrid.")
@Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-18T04:51:41.119Z[GMT]")
public class RbdUnrestrictedAlternativeLink {
  @SerializedName("id")
  private String id = null;

  @SerializedName("filename")
  private String filename = null;

  @SerializedName("download")
  private String download = null;

  @SerializedName("mimeType")
  private String mimeType = null;

  @SerializedName("type")
  private String type = null;

  public RbdUnrestrictedAlternativeLink id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unrestricted Link ID
   * @return id
  **/
  @Schema(description = "Unrestricted Link ID")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public RbdUnrestrictedAlternativeLink filename(String filename) {
    this.filename = filename;
    return this;
  }

   /**
   * File Name
   * @return filename
  **/
  @Schema(description = "File Name")
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }

  public RbdUnrestrictedAlternativeLink download(String download) {
    this.download = download;
    return this;
  }

   /**
   * Download Link
   * @return download
  **/
  @Schema(description = "Download Link")
  public String getDownload() {
    return download;
  }

  public void setDownload(String download) {
    this.download = download;
  }

  public RbdUnrestrictedAlternativeLink mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

   /**
   * Type of file, generally based off its extension
   * @return mimeType
  **/
  @Schema(description = "Type of file, generally based off its extension")
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }

  public RbdUnrestrictedAlternativeLink type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Type of file, generally based off its quality
   * @return type
  **/
  @Schema(description = "Type of file, generally based off its quality")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RbdUnrestrictedAlternativeLink rbdUnrestrictedAlternativeLink = (RbdUnrestrictedAlternativeLink) o;
    return Objects.equals(this.id, rbdUnrestrictedAlternativeLink.id) &&
        Objects.equals(this.filename, rbdUnrestrictedAlternativeLink.filename) &&
        Objects.equals(this.download, rbdUnrestrictedAlternativeLink.download) &&
        Objects.equals(this.mimeType, rbdUnrestrictedAlternativeLink.mimeType) &&
        Objects.equals(this.type, rbdUnrestrictedAlternativeLink.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, filename, download, mimeType, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RbdUnrestrictedAlternativeLink {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
