/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.celestialdata.plexbot.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import javax.annotation.processing.Generated;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * An unrestricted link on Real-Debrid
 */
@Generated(value = "net.celestialdata.plexbot.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-23T04:57:45.670Z[GMT]")
public class RdbUnrestrictedLink {
    @SerializedName("id")
    private String id = null;

    @SerializedName("filename")
    private String filename = null;

    @SerializedName("filesize")
    private Long filesize = null;

    @SerializedName("link")
    private String link = null;

    @SerializedName("host")
    private String host = null;

    @SerializedName("chunks")
    private Integer chunks = null;
    @SerializedName("crc")
    private CrcEnum crc = null;
    @SerializedName("download")
    private String download = null;
    @SerializedName("streamable")
    private StreamableEnum streamable = null;
    @SerializedName("mimeType")
    private String mimeType = null;
    @SerializedName("alternative")
    private List<RbdUnrestrictedAlternativeLink> alternative = null;
    @SerializedName("type")
    private String type = null;

    @SuppressWarnings("unused")
    public RdbUnrestrictedLink id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Unrestricted link ID
     *
     * @return id
     **/
    @SuppressWarnings("unused")
    public String getId() {
        return id;
    }

    @SuppressWarnings("unused")
    public void setId(String id) {
        this.id = id;
    }

    @SuppressWarnings("unused")
    public RdbUnrestrictedLink filename(String filename) {
        this.filename = filename;
        return this;
    }

    /**
     * Name of the file
     *
     * @return filename
     **/
    @SuppressWarnings("unused")
    public String getFilename() {
        return filename;
    }

    @SuppressWarnings("unused")
    public void setFilename(String filename) {
        this.filename = filename;
    }

    @SuppressWarnings("unused")
    public RdbUnrestrictedLink filesize(Long filesize) {
        this.filesize = filesize;
        return this;
    }

    /**
     * Size of the file in bytes (0 if unknown)
     *
     * @return filesize
     **/
    @SuppressWarnings("unused")
    public Long getFilesize() {
        return filesize;
    }

    @SuppressWarnings("unused")
    public void setFilesize(Long filesize) {
        this.filesize = filesize;
    }

    @SuppressWarnings("unused")
    public RdbUnrestrictedLink link(String link) {
        this.link = link;
        return this;
    }

    /**
     * Original link
     *
     * @return link
     **/
    @SuppressWarnings("unused")
    public String getLink() {
        return link;
    }

    @SuppressWarnings("unused")
    public void setLink(String link) {
        this.link = link;
    }

    @SuppressWarnings("unused")
    public RdbUnrestrictedLink host(String host) {
        this.host = host;
        return this;
    }

    /**
     * Hostname of the original server
     *
     * @return host
     **/
    @SuppressWarnings("unused")
    public String getHost() {
        return host;
    }

    @SuppressWarnings("unused")
    public void setHost(String host) {
        this.host = host;
    }

    @SuppressWarnings("unused")
    public RdbUnrestrictedLink chunks(Integer chunks) {
        this.chunks = chunks;
        return this;
    }

    /**
     * Maximum number of chunks allowed
     *
     * @return chunks
     **/
    @SuppressWarnings("unused")
    public Integer getChunks() {
        return chunks;
    }

    @SuppressWarnings("unused")
    public void setChunks(Integer chunks) {
        this.chunks = chunks;
    }

    @SuppressWarnings("unused")
    public RdbUnrestrictedLink crc(CrcEnum crc) {
        this.crc = crc;
        return this;
    }

    /**
     * Disable or enable CRC checking
     *
     * @return crc
     **/
    @SuppressWarnings("unused")
    public CrcEnum getCrc() {
        return crc;
    }

    @SuppressWarnings("unused")
    public void setCrc(CrcEnum crc) {
        this.crc = crc;
    }

    @SuppressWarnings("unused")
    public RdbUnrestrictedLink download(String download) {
        this.download = download;
        return this;
    }

    /**
     * Generated download link
     *
     * @return download
     **/
    @SuppressWarnings("unused")
    public String getDownload() {
        return download;
    }

    @SuppressWarnings("unused")
    public void setDownload(String download) {
        this.download = download;
    }

    @SuppressWarnings("unused")
    public RdbUnrestrictedLink streamable(StreamableEnum streamable) {
        this.streamable = streamable;
        return this;
    }

    /**
     * Is the file streamable
     *
     * @return streamable
     **/
    @SuppressWarnings("unused")
    public StreamableEnum getStreamable() {
        return streamable;
    }

    @SuppressWarnings("unused")
    public void setStreamable(StreamableEnum streamable) {
        this.streamable = streamable;
    }

    @SuppressWarnings("unused")
    public RdbUnrestrictedLink mimeType(String mimeType) {
        this.mimeType = mimeType;
        return this;
    }

    /**
     * Type of the file based off its extension
     *
     * @return mimeType
     **/
    @SuppressWarnings("unused")
    public String getMimeType() {
        return mimeType;
    }

    @SuppressWarnings("unused")
    public void setMimeType(String mimeType) {
        this.mimeType = mimeType;
    }

    @SuppressWarnings("unused")
    public RdbUnrestrictedLink alternative(List<RbdUnrestrictedAlternativeLink> alternative) {
        this.alternative = alternative;
        return this;
    }

    @SuppressWarnings("unused")
    public RdbUnrestrictedLink addAlternativeItem(RbdUnrestrictedAlternativeLink alternativeItem) {
        if (this.alternative == null) {
            this.alternative = new ArrayList<RbdUnrestrictedAlternativeLink>();
        }
        this.alternative.add(alternativeItem);
        return this;
    }

    /**
     * Get alternative
     *
     * @return alternative
     **/
    @SuppressWarnings("unused")
    public List<RbdUnrestrictedAlternativeLink> getAlternative() {
        return alternative;
    }

    @SuppressWarnings("unused")
    public void setAlternative(List<RbdUnrestrictedAlternativeLink> alternative) {
        this.alternative = alternative;
    }

    @SuppressWarnings("unused")
    public RdbUnrestrictedLink type(String type) {
        this.type = type;
        return this;
    }

    /**
     * Type of the file, generally its quality
     *
     * @return type
     **/
    @SuppressWarnings("unused")
    public String getType() {
        return type;
    }

    @SuppressWarnings("unused")
    public void setType(String type) {
        this.type = type;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RdbUnrestrictedLink rdbUnrestrictedLink = (RdbUnrestrictedLink) o;
        return Objects.equals(this.id, rdbUnrestrictedLink.id) &&
                Objects.equals(this.filename, rdbUnrestrictedLink.filename) &&
                Objects.equals(this.filesize, rdbUnrestrictedLink.filesize) &&
                Objects.equals(this.link, rdbUnrestrictedLink.link) &&
                Objects.equals(this.host, rdbUnrestrictedLink.host) &&
                Objects.equals(this.chunks, rdbUnrestrictedLink.chunks) &&
                Objects.equals(this.crc, rdbUnrestrictedLink.crc) &&
                Objects.equals(this.download, rdbUnrestrictedLink.download) &&
                Objects.equals(this.streamable, rdbUnrestrictedLink.streamable) &&
                Objects.equals(this.mimeType, rdbUnrestrictedLink.mimeType) &&
                Objects.equals(this.alternative, rdbUnrestrictedLink.alternative) &&
                Objects.equals(this.type, rdbUnrestrictedLink.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, filename, filesize, link, host, chunks, crc, download, streamable, mimeType, alternative, type);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RdbUnrestrictedLink {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
        sb.append("    filesize: ").append(toIndentedString(filesize)).append("\n");
        sb.append("    link: ").append(toIndentedString(link)).append("\n");
        sb.append("    host: ").append(toIndentedString(host)).append("\n");
        sb.append("    chunks: ").append(toIndentedString(chunks)).append("\n");
        sb.append("    crc: ").append(toIndentedString(crc)).append("\n");
        sb.append("    download: ").append(toIndentedString(download)).append("\n");
        sb.append("    streamable: ").append(toIndentedString(streamable)).append("\n");
        sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
        sb.append("    alternative: ").append(toIndentedString(alternative)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    /**
     * Disable or enable CRC checking
     */
    @JsonAdapter(CrcEnum.Adapter.class)
    public enum CrcEnum {
        NUMBER_0(0),
        NUMBER_1(1);

        private final Integer value;

        @SuppressWarnings("unused")
        CrcEnum(Integer value) {
            this.value = value;
        }

        public static CrcEnum fromValue(String text) {
            for (CrcEnum b : CrcEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public Integer getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @SuppressWarnings("unused")
        public static class Adapter extends TypeAdapter<CrcEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final CrcEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public CrcEnum read(final JsonReader jsonReader) throws IOException {
                Integer value = jsonReader.nextInt();
                return CrcEnum.fromValue(String.valueOf(value));
            }
        }
    }

    /**
     * Is the file streamable
     */
    @JsonAdapter(StreamableEnum.Adapter.class)
    public enum StreamableEnum {
        NUMBER_0(0),
        NUMBER_1(1);

        private final Integer value;

        @SuppressWarnings("unused")
        StreamableEnum(Integer value) {
            this.value = value;
        }

        public static StreamableEnum fromValue(String text) {
            for (StreamableEnum b : StreamableEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public Integer getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @SuppressWarnings("unused")
        public static class Adapter extends TypeAdapter<StreamableEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StreamableEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StreamableEnum read(final JsonReader jsonReader) throws IOException {
                Integer value = jsonReader.nextInt();
                return StreamableEnum.fromValue(String.valueOf(value));
            }
        }
    }

}
