/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package net.celestialdata.plexbot.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Objects;
import java.util.Set;

/**
 * Result of searching for a movie on OMDB
 */
@SuppressWarnings("unused")
@ApiModel(description = "Result of searching for a movie on OMDB")
@javax.annotation.
        Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2021-02-18T23:30:04.504837-06:00[America/Chicago]")
public class OmdbSearchResult {
    public static final String SERIALIZED_NAME_SEARCH = "Search";
    public static final String SERIALIZED_NAME_TOTAL_RESULTS = "totalResults";
    public static final String SERIALIZED_NAME_RESPONSE = "Response";
    public static final String SERIALIZED_NAME_ERROR = "Error";
    @SerializedName(SERIALIZED_NAME_SEARCH)
    private Set<OmdbItem> search = new LinkedHashSet<>();
    @SerializedName(SERIALIZED_NAME_TOTAL_RESULTS)
    private String totalResults;
    @SerializedName(SERIALIZED_NAME_RESPONSE)
    private ResponseEnum response;
    @SerializedName(SERIALIZED_NAME_ERROR)
    private String error;

    public OmdbSearchResult search(Set<OmdbItem> search) {

        this.search = search;
        return this;
    }

    public OmdbSearchResult addSearchItem(OmdbItem searchItem) {
        this.search.add(searchItem);
        return this;
    }

    /**
     * Get search
     *
     * @return search
     **/
    @ApiModelProperty(required = true, value = "")

    public Set<OmdbItem> getSearch() {
        return search;
    }

    public void setSearch(Set<OmdbItem> search) {
        this.search = search;
    }

    public OmdbSearchResult totalResults(String totalResults) {

        this.totalResults = totalResults;
        return this;
    }

    /**
     * Get totalResults
     *
     * @return totalResults
     **/
    @ApiModelProperty(required = true, value = "")

    public String getTotalResults() {
        return totalResults;
    }

    public void setTotalResults(String totalResults) {
        this.totalResults = totalResults;
    }

    public OmdbSearchResult response(ResponseEnum response) {

        this.response = response;
        return this;
    }

    /**
     * Get response
     *
     * @return response
     **/
    @ApiModelProperty(required = true, value = "")

    public ResponseEnum getResponse() {
        return response;
    }

    public void setResponse(ResponseEnum response) {
        this.response = response;
    }

    public OmdbSearchResult error(String error) {

        this.error = error;
        return this;
    }

    /**
     * Get error
     *
     * @return error
     **/
    @ApiModelProperty(required = true, value = "")

    public String getError() {
        return error;
    }

    public void setError(String error) {
        this.error = error;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OmdbSearchResult omdbSearchResult = (OmdbSearchResult) o;
        return Objects.equals(this.search, omdbSearchResult.search) &&
                Objects.equals(this.totalResults, omdbSearchResult.totalResults) &&
                Objects.equals(this.response, omdbSearchResult.response) &&
                Objects.equals(this.error, omdbSearchResult.error);
    }

    @Override
    public int hashCode() {
        return Objects.hash(search, totalResults, response, error);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OmdbSearchResult {\n");
        sb.append("    search: ").append(toIndentedString(search)).append("\n");
        sb.append("    totalResults: ")
                .append(toIndentedString(totalResults))
                .append("\n");
        sb.append("    response: ").append(toIndentedString(response)).append("\n");
        sb.append("    error: ").append(toIndentedString(error)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Gets or Sets response
     */
    @JsonAdapter(ResponseEnum.Adapter.class)
    public enum ResponseEnum {
        TRUE("True"),

        FALSE("False");

        private final String value;

        ResponseEnum(String value) {
            this.value = value;
        }

        public static ResponseEnum fromValue(String value) {
            for (ResponseEnum b : ResponseEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<ResponseEnum> {
            @Override
            public void write(final JsonWriter jsonWriter,
                              final ResponseEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ResponseEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ResponseEnum.fromValue(value);
            }
        }
    }
}
