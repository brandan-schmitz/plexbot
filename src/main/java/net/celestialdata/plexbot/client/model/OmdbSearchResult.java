/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.celestialdata.plexbot.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import javax.annotation.processing.Generated;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Result of searching for a movie on OMDb
 */
@Schema(description = "Result of searching for a movie on OMDb")
@Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-18T04:51:41.119Z[GMT]")
public class OmdbSearchResult implements OneOfinlineResponse200 {
  @SerializedName("Search")
  private List<OmdbSearchResult> search = new ArrayList<OmdbSearchResult>();

  @SerializedName("totalResults")
  private String totalResults = null;

  @SerializedName("Response")
  private String response = null;

  @SerializedName("Error")
  private String error = null;

  public OmdbSearchResult search(List<OmdbSearchResult> search) {
    this.search = search;
    return this;
  }

  public OmdbSearchResult addSearchItem(OmdbSearchResult searchItem) {
    this.search.add(searchItem);
    return this;
  }

   /**
   * Get search
   * @return search
  **/
  @Schema(required = true, description = "")
  public List<OmdbSearchResult> getSearch() {
    return search;
  }

  public void setSearch(List<OmdbSearchResult> search) {
    this.search = search;
  }

  public OmdbSearchResult totalResults(String totalResults) {
    this.totalResults = totalResults;
    return this;
  }

   /**
   * Get totalResults
   * @return totalResults
  **/
  @Schema(required = true, description = "")
  public String getTotalResults() {
    return totalResults;
  }

  public void setTotalResults(String totalResults) {
    this.totalResults = totalResults;
  }

  public OmdbSearchResult response(String response) {
    this.response = response;
    return this;
  }

   /**
   * Get response
   * @return response
  **/
  @Schema(required = true, description = "")
  public String getResponse() {
    return response;
  }

  public void setResponse(String response) {
    this.response = response;
  }

  public OmdbSearchResult error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @Schema(required = true, description = "")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OmdbSearchResult omdbSearchResult = (OmdbSearchResult) o;
    return Objects.equals(this.search, omdbSearchResult.search) &&
        Objects.equals(this.totalResults, omdbSearchResult.totalResults) &&
        Objects.equals(this.response, omdbSearchResult.response) &&
        Objects.equals(this.error, omdbSearchResult.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(search, totalResults, response, error);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OmdbSearchResult {\n");

    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    totalResults: ").append(toIndentedString(totalResults)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
