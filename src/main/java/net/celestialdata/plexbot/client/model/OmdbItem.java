/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package net.celestialdata.plexbot.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import net.celestialdata.plexbot.configuration.BotConfig;

import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Objects;
import java.util.Set;

/**
 * Information about item from OMDB
 */
@ApiModel(description = "Information about item from OMDB")
@javax.annotation.
        Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2021-02-18T23:30:04.504837-06:00[America/Chicago]")
public class OmdbItem {
    public static final String SERIALIZED_NAME_TITLE = "Title";
    public static final String SERIALIZED_NAME_YEAR = "Year";
    public static final String SERIALIZED_NAME_RATED = "Rated";
    public static final String SERIALIZED_NAME_RELEASED = "Released";
    public static final String SERIALIZED_NAME_SEASON = "Season";
    public static final String SERIALIZED_NAME_EPISODE = "Episode";
    public static final String SERIALIZED_NAME_RUNTIME = "Runtime";
    public static final String SERIALIZED_NAME_GENRE = "Genre";
    public static final String SERIALIZED_NAME_DIRECTOR = "Director";
    public static final String SERIALIZED_NAME_WRITER = "Writer";
    public static final String SERIALIZED_NAME_ACTORS = "Actors";
    public static final String SERIALIZED_NAME_PLOT = "Plot";
    public static final String SERIALIZED_NAME_LANGUAGE = "Language";
    public static final String SERIALIZED_NAME_COUNTRY = "Country";
    public static final String SERIALIZED_NAME_AWARDS = "Awards";
    public static final String SERIALIZED_NAME_POSTER = "Poster";
    public static final String SERIALIZED_NAME_RATINGS = "Ratings";
    public static final String SERIALIZED_NAME_METASCORE = "Metascore";
    public static final String SERIALIZED_NAME_IMDB_RATING = "imdbRating";
    public static final String SERIALIZED_NAME_IMDB_VOTES = "imdbVotes";
    public static final String SERIALIZED_NAME_IMDB_I_D = "imdbID";
    public static final String SERIALIZED_NAME_SERIES_I_D = "seriesID";
    public static final String SERIALIZED_NAME_TYPE = "Type";
    public static final String SERIALIZED_NAME_D_V_D = "DVD";
    public static final String SERIALIZED_NAME_BOX_OFFICE = "BoxOffice";
    public static final String SERIALIZED_NAME_PRODUCTION = "Production";
    public static final String SERIALIZED_NAME_WEBSITE = "Website";
    public static final String SERIALIZED_NAME_RESPONSE = "Response";
    public static final String SERIALIZED_NAME_ERROR = "Error";
    @SerializedName(SERIALIZED_NAME_TITLE)
    private String title;
    @SerializedName(SERIALIZED_NAME_YEAR)
    private String year;
    @SerializedName(SERIALIZED_NAME_RATED)
    private String rated;
    @SerializedName(SERIALIZED_NAME_RELEASED)
    private String released;
    @SerializedName(SERIALIZED_NAME_SEASON)
    private String season;
    @SerializedName(SERIALIZED_NAME_EPISODE)
    private String episode;
    @SerializedName(SERIALIZED_NAME_RUNTIME)
    private String runtime;
    @SerializedName(SERIALIZED_NAME_GENRE)
    private String genre;
    @SerializedName(SERIALIZED_NAME_DIRECTOR)
    private String director;
    @SerializedName(SERIALIZED_NAME_WRITER)
    private String writer;
    @SerializedName(SERIALIZED_NAME_ACTORS)
    private String actors;
    @SerializedName(SERIALIZED_NAME_PLOT)
    private String plot;
    @SerializedName(SERIALIZED_NAME_LANGUAGE)
    private String language;
    @SerializedName(SERIALIZED_NAME_COUNTRY)
    private String country;
    @SerializedName(SERIALIZED_NAME_AWARDS)
    private String awards;
    @SerializedName(SERIALIZED_NAME_POSTER)
    private String poster;
    @SerializedName(SERIALIZED_NAME_RATINGS)
    private Set<OmdbItemRating> ratings = null;
    @SerializedName(SERIALIZED_NAME_METASCORE)
    private String metascore;
    @SerializedName(SERIALIZED_NAME_IMDB_RATING)
    private String imdbRating;
    @SerializedName(SERIALIZED_NAME_IMDB_VOTES)
    private String imdbVotes;
    @SerializedName(SERIALIZED_NAME_IMDB_I_D)
    private String imdbID;
    @SerializedName(SERIALIZED_NAME_SERIES_I_D)
    private String seriesID;
    @SerializedName(SERIALIZED_NAME_TYPE)
    private TypeEnum type;
    @SerializedName(SERIALIZED_NAME_D_V_D)
    private String DVD;
    @SerializedName(SERIALIZED_NAME_BOX_OFFICE)
    private String boxOffice;
    @SerializedName(SERIALIZED_NAME_PRODUCTION)
    private String production;
    @SerializedName(SERIALIZED_NAME_WEBSITE)
    private String website;
    @SerializedName(SERIALIZED_NAME_RESPONSE)
    private ResponseEnum response;
    @SerializedName(SERIALIZED_NAME_ERROR)
    private String error;

    @SuppressWarnings("unused")
    public OmdbItem title(String title) {

        this.title = title;
        return this;
    }

    /**
     * Title
     *
     * @return title
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Title")

    public String getTitle() {
        return title;
    }

    @SuppressWarnings("unused")
    public void setTitle(String title) {
        this.title = title;
    }

    @SuppressWarnings("unused")
    public OmdbItem year(String year) {

        this.year = year;
        return this;
    }

    /**
     * Release Year
     *
     * @return year
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Release Year")

    public String getYear() {
        return year;
    }

    @SuppressWarnings("unused")
    public void setYear(String year) {
        this.year = year;
    }

    @SuppressWarnings("unused")
    public OmdbItem rated(String rated) {

        this.rated = rated;
        return this;
    }

    /**
     * Rating
     *
     * @return rated
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Rating")

    public String getRated() {
        return rated;
    }

    @SuppressWarnings("unused")
    public void setRated(String rated) {
        this.rated = rated;
    }

    @SuppressWarnings("unused")
    public OmdbItem released(String released) {

        this.released = released;
        return this;
    }

    /**
     * Release Date
     *
     * @return released
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Release Date")

    public String getReleased() {
        return released;
    }

    @SuppressWarnings("unused")
    public void setReleased(String released) {
        this.released = released;
    }

    @SuppressWarnings("unused")
    public OmdbItem season(String season) {

        this.season = season;
        return this;
    }

    /**
     * Season Number
     *
     * @return season
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Season Number")

    public String getSeason() {
        return season;
    }

    @SuppressWarnings("unused")
    public void setSeason(String season) {
        this.season = season;
    }

    @SuppressWarnings("unused")
    public OmdbItem episode(String episode) {

        this.episode = episode;
        return this;
    }

    /**
     * Episode Number
     *
     * @return episode
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Episode Number")

    public String getEpisode() {
        return episode;
    }

    @SuppressWarnings("unused")
    public void setEpisode(String episode) {
        this.episode = episode;
    }

    @SuppressWarnings("unused")
    public OmdbItem runtime(String runtime) {

        this.runtime = runtime;
        return this;
    }

    /**
     * Runtime (minutes)
     *
     * @return runtime
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Runtime (minutes)")

    public String getRuntime() {
        return runtime;
    }

    @SuppressWarnings("unused")
    public void setRuntime(String runtime) {
        this.runtime = runtime;
    }

    @SuppressWarnings("unused")
    public OmdbItem genre(String genre) {

        this.genre = genre;
        return this;
    }

    /**
     * Genres
     *
     * @return genre
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Genres")

    public String getGenre() {
        return genre;
    }

    @SuppressWarnings("unused")
    public void setGenre(String genre) {
        this.genre = genre;
    }

    @SuppressWarnings("unused")
    public OmdbItem director(String director) {

        this.director = director;
        return this;
    }

    /**
     * Director
     *
     * @return director
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Director")

    public String getDirector() {
        return director;
    }

    @SuppressWarnings("unused")
    public void setDirector(String director) {
        this.director = director;
    }

    @SuppressWarnings("unused")
    public OmdbItem writer(String writer) {

        this.writer = writer;
        return this;
    }

    /**
     * Writers
     *
     * @return writer
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Writers")

    public String getWriter() {
        return writer;
    }

    @SuppressWarnings("unused")
    public void setWriter(String writer) {
        this.writer = writer;
    }

    @SuppressWarnings("unused")
    public OmdbItem actors(String actors) {

        this.actors = actors;
        return this;
    }

    /**
     * Movie Actors
     *
     * @return actors
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Movie Actors")

    public String getActors() {
        return actors;
    }

    @SuppressWarnings("unused")
    public void setActors(String actors) {
        this.actors = actors;
    }

    @SuppressWarnings("unused")
    public OmdbItem plot(String plot) {

        this.plot = plot;
        return this;
    }

    /**
     * Plot
     *
     * @return plot
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Plot")

    public String getPlot() {
        return plot;
    }

    @SuppressWarnings("unused")
    public void setPlot(String plot) {
        this.plot = plot;
    }

    @SuppressWarnings("unused")
    public OmdbItem language(String language) {

        this.language = language;
        return this;
    }

    /**
     * Language
     *
     * @return language
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Language")

    public String getLanguage() {
        return language;
    }

    @SuppressWarnings("unused")
    public void setLanguage(String language) {
        this.language = language;
    }

    @SuppressWarnings("unused")
    public OmdbItem country(String country) {

        this.country = country;
        return this;
    }

    /**
     * Country
     *
     * @return country
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Country")

    public String getCountry() {
        return country;
    }

    @SuppressWarnings("unused")
    public void setCountry(String country) {
        this.country = country;
    }

    @SuppressWarnings("unused")
    public OmdbItem awards(String awards) {

        this.awards = awards;
        return this;
    }

    /**
     * Awards
     *
     * @return awards
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Awards")

    public String getAwards() {
        return awards;
    }

    @SuppressWarnings("unused")
    public void setAwards(String awards) {
        this.awards = awards;
    }

    @SuppressWarnings("unused")
    public OmdbItem poster(String poster) {

        this.poster = poster;
        return this;
    }

    /**
     * Poster URL
     *
     * @return poster
     **/
    @ApiModelProperty(value = "Poster URL")

    public String getPoster() {
        if (poster.equalsIgnoreCase("N/A")) {
            return BotConfig.getInstance().noPosterImageUrl();
        } else return poster;
    }

    @SuppressWarnings("unused")
    public void setPoster(String poster) {
        this.poster = poster;
    }

    @SuppressWarnings("unused")
    public OmdbItem ratings(Set<OmdbItemRating> ratings) {

        this.ratings = ratings;
        return this;
    }

    @SuppressWarnings("unused")
    public OmdbItem addRatingsItem(OmdbItemRating ratingsItem) {
        if (this.ratings == null) {
            this.ratings = new LinkedHashSet<>();
        }
        this.ratings.add(ratingsItem);
        return this;
    }

    /**
     * Ratings
     *
     * @return ratings
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Ratings")

    public Set<OmdbItemRating> getRatings() {
        return ratings;
    }

    @SuppressWarnings("unused")
    public void setRatings(Set<OmdbItemRating> ratings) {
        this.ratings = ratings;
    }

    @SuppressWarnings("unused")
    public OmdbItem metascore(String metascore) {

        this.metascore = metascore;
        return this;
    }

    /**
     * Metascore
     *
     * @return metascore
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Metascore")

    public String getMetascore() {
        return metascore;
    }

    @SuppressWarnings("unused")
    public void setMetascore(String metascore) {
        this.metascore = metascore;
    }

    @SuppressWarnings("unused")
    public OmdbItem imdbRating(String imdbRating) {

        this.imdbRating = imdbRating;
        return this;
    }

    /**
     * IMDB Ratings
     *
     * @return imdbRating
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "IMDB Ratings")

    public String getImdbRating() {
        return imdbRating;
    }

    @SuppressWarnings("unused")
    public void setImdbRating(String imdbRating) {
        this.imdbRating = imdbRating;
    }

    @SuppressWarnings("unused")
    public OmdbItem imdbVotes(String imdbVotes) {

        this.imdbVotes = imdbVotes;
        return this;
    }

    /**
     * IMDB Votes
     *
     * @return imdbVotes
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "IMDB Votes")

    public String getImdbVotes() {
        return imdbVotes;
    }

    @SuppressWarnings("unused")
    public void setImdbVotes(String imdbVotes) {
        this.imdbVotes = imdbVotes;
    }

    @SuppressWarnings("unused")
    public OmdbItem imdbID(String imdbID) {

        this.imdbID = imdbID;
        return this;
    }

    /**
     * IMDB ID
     *
     * @return imdbID
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "IMDB ID")

    public String getImdbID() {
        return imdbID;
    }

    @SuppressWarnings("unused")
    public void setImdbID(String imdbID) {
        this.imdbID = imdbID;
    }

    @SuppressWarnings("unused")
    public OmdbItem seriesID(String seriesID) {

        this.seriesID = seriesID;
        return this;
    }

    /**
     * TV Series IMDB ID
     *
     * @return seriesID
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "TV Series IMDB ID")

    public String getSeriesID() {
        return seriesID;
    }

    @SuppressWarnings("unused")
    public void setSeriesID(String seriesID) {
        this.seriesID = seriesID;
    }

    @SuppressWarnings("unused")
    public OmdbItem type(TypeEnum type) {

        this.type = type;
        return this;
    }

    /**
     * Type
     *
     * @return type
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Type")

    public TypeEnum getType() {
        return type;
    }

    @SuppressWarnings("unused")
    public void setType(TypeEnum type) {
        this.type = type;
    }

    @SuppressWarnings("unused")
    public OmdbItem DVD(String DVD) {

        this.DVD = DVD;
        return this;
    }

    /**
     * DVD Sales
     *
     * @return DVD
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "DVD Sales")

    public String getDVD() {
        return DVD;
    }

    @SuppressWarnings("unused")
    public void setDVD(String DVD) {
        this.DVD = DVD;
    }

    @SuppressWarnings("unused")
    public OmdbItem boxOffice(String boxOffice) {

        this.boxOffice = boxOffice;
        return this;
    }

    /**
     * Box Office Sales
     *
     * @return boxOffice
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Box Office Sales")

    public String getBoxOffice() {
        return boxOffice;
    }

    @SuppressWarnings("unused")
    public void setBoxOffice(String boxOffice) {
        this.boxOffice = boxOffice;
    }

    @SuppressWarnings("unused")
    public OmdbItem production(String production) {

        this.production = production;
        return this;
    }

    /**
     * Production Cost
     *
     * @return production
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Production Cost")

    public String getProduction() {
        return production;
    }

    @SuppressWarnings("unused")
    public void setProduction(String production) {
        this.production = production;
    }

    @SuppressWarnings("unused")
    public OmdbItem website(String website) {

        this.website = website;
        return this;
    }

    /**
     * Website
     *
     * @return website
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Website")

    public String getWebsite() {
        return website;
    }

    @SuppressWarnings("unused")
    public void setWebsite(String website) {
        this.website = website;
    }

    @SuppressWarnings("unused")
    public OmdbItem response(ResponseEnum response) {

        this.response = response;
        return this;
    }

    /**
     * API Response Success State
     *
     * @return response
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "API Response Success State")

    public ResponseEnum getResponse() {
        return response;
    }

    @SuppressWarnings("unused")
    public void setResponse(ResponseEnum response) {
        this.response = response;
    }

    @SuppressWarnings("unused")
    public OmdbItem error(String error) {

        this.error = error;
        return this;
    }

    /**
     * API Error Message (if error occurred)
     *
     * @return error
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "API Error Message (if error occurred)")

    public String getError() {
        return error;
    }

    @SuppressWarnings("unused")
    public void setError(String error) {
        this.error = error;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OmdbItem omdbItem = (OmdbItem) o;
        return Objects.equals(this.title, omdbItem.title) &&
                Objects.equals(this.year, omdbItem.year) &&
                Objects.equals(this.rated, omdbItem.rated) &&
                Objects.equals(this.released, omdbItem.released) &&
                Objects.equals(this.season, omdbItem.season) &&
                Objects.equals(this.episode, omdbItem.episode) &&
                Objects.equals(this.runtime, omdbItem.runtime) &&
                Objects.equals(this.genre, omdbItem.genre) &&
                Objects.equals(this.director, omdbItem.director) &&
                Objects.equals(this.writer, omdbItem.writer) &&
                Objects.equals(this.actors, omdbItem.actors) &&
                Objects.equals(this.plot, omdbItem.plot) &&
                Objects.equals(this.language, omdbItem.language) &&
                Objects.equals(this.country, omdbItem.country) &&
                Objects.equals(this.awards, omdbItem.awards) &&
                Objects.equals(this.poster, omdbItem.poster) &&
                Objects.equals(this.ratings, omdbItem.ratings) &&
                Objects.equals(this.metascore, omdbItem.metascore) &&
                Objects.equals(this.imdbRating, omdbItem.imdbRating) &&
                Objects.equals(this.imdbVotes, omdbItem.imdbVotes) &&
                Objects.equals(this.imdbID, omdbItem.imdbID) &&
                Objects.equals(this.seriesID, omdbItem.seriesID) &&
                Objects.equals(this.type, omdbItem.type) &&
                Objects.equals(this.DVD, omdbItem.DVD) &&
                Objects.equals(this.boxOffice, omdbItem.boxOffice) &&
                Objects.equals(this.production, omdbItem.production) &&
                Objects.equals(this.website, omdbItem.website) &&
                Objects.equals(this.response, omdbItem.response) &&
                Objects.equals(this.error, omdbItem.error);
    }

    @Override
    public int hashCode() {
        return Objects.hash(title, year, rated, released, season, episode, runtime,
                genre, director, writer, actors, plot, language,
                country, awards, poster, ratings, metascore, imdbRating,
                imdbVotes, imdbID, seriesID, type, DVD, boxOffice,
                production, website, response, error);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OmdbItem {\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    year: ").append(toIndentedString(year)).append("\n");
        sb.append("    rated: ").append(toIndentedString(rated)).append("\n");
        sb.append("    released: ").append(toIndentedString(released)).append("\n");
        sb.append("    season: ").append(toIndentedString(season)).append("\n");
        sb.append("    episode: ").append(toIndentedString(episode)).append("\n");
        sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
        sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
        sb.append("    director: ").append(toIndentedString(director)).append("\n");
        sb.append("    writer: ").append(toIndentedString(writer)).append("\n");
        sb.append("    actors: ").append(toIndentedString(actors)).append("\n");
        sb.append("    plot: ").append(toIndentedString(plot)).append("\n");
        sb.append("    language: ").append(toIndentedString(language)).append("\n");
        sb.append("    country: ").append(toIndentedString(country)).append("\n");
        sb.append("    awards: ").append(toIndentedString(awards)).append("\n");
        sb.append("    poster: ").append(toIndentedString(poster)).append("\n");
        sb.append("    ratings: ").append(toIndentedString(ratings)).append("\n");
        sb.append("    metascore: ")
                .append(toIndentedString(metascore))
                .append("\n");
        sb.append("    imdbRating: ")
                .append(toIndentedString(imdbRating))
                .append("\n");
        sb.append("    imdbVotes: ")
                .append(toIndentedString(imdbVotes))
                .append("\n");
        sb.append("    imdbID: ").append(toIndentedString(imdbID)).append("\n");
        sb.append("    seriesID: ").append(toIndentedString(seriesID)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    DVD: ").append(toIndentedString(DVD)).append("\n");
        sb.append("    boxOffice: ")
                .append(toIndentedString(boxOffice))
                .append("\n");
        sb.append("    production: ")
                .append(toIndentedString(production))
                .append("\n");
        sb.append("    website: ").append(toIndentedString(website)).append("\n");
        sb.append("    response: ").append(toIndentedString(response)).append("\n");
        sb.append("    error: ").append(toIndentedString(error)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Type
     */
    @JsonAdapter(TypeEnum.Adapter.class)
    public enum TypeEnum {
        EPISODE("episode"),

        SERIES("series"),

        MOVIE("movie");

        private final String value;

        @SuppressWarnings("unused")
        TypeEnum(String value) {
            this.value = value;
        }

        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @SuppressWarnings("unused")
        public static class Adapter extends TypeAdapter<TypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TypeEnum.fromValue(value);
            }
        }
    }

    /**
     * API Response Success State
     */
    @JsonAdapter(ResponseEnum.Adapter.class)
    public enum ResponseEnum {
        TRUE("True"),

        FALSE("False");

        private final String value;

        ResponseEnum(String value) {
            this.value = value;
        }

        public static ResponseEnum fromValue(String value) {
            for (ResponseEnum b : ResponseEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<ResponseEnum> {
            @Override
            public void write(final JsonWriter jsonWriter,
                              final ResponseEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ResponseEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ResponseEnum.fromValue(value);
            }
        }
    }
}
