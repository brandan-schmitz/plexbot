/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.celestialdata.plexbot.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import javax.annotation.processing.Generated;
import java.io.IOException;
import java.util.Objects;

/**
 * Real-Debrid User
 */
@Schema(description = "Real-Debrid User")
@Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-18T04:51:41.119Z[GMT]")
public class RdbUser {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("username")
  private String username = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("points")
  private Integer points = null;

  @SerializedName("locale")
  private String locale = null;

  @SerializedName("avatar")
  private String avatar = null;

  /**
   * User&#x27;s Premium Status
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PREMIUM("premium"),
    FREE("free");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("premium")
  private Integer premium = null;

  @SerializedName("expiration")
  private String expiration = null;

  public RdbUser id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * User&#x27;s ID
   * @return id
  **/
  @Schema(description = "User's ID")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public RdbUser username(String username) {
    this.username = username;
    return this;
  }

   /**
   * User&#x27;s Username
   * @return username
  **/
  @Schema(description = "User's Username")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public RdbUser email(String email) {
    this.email = email;
    return this;
  }

   /**
   * User&#x27;s Email
   * @return email
  **/
  @Schema(description = "User's Email")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public RdbUser points(Integer points) {
    this.points = points;
    return this;
  }

   /**
   * User&#x27;s Fidelity Points
   * @return points
  **/
  @Schema(description = "User's Fidelity Points")
  public Integer getPoints() {
    return points;
  }

  public void setPoints(Integer points) {
    this.points = points;
  }

  public RdbUser locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * User&#x27;s Language
   * @return locale
  **/
  @Schema(description = "User's Language")
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }

  public RdbUser avatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

   /**
   * User&#x27;s Avatar Image URL
   * @return avatar
  **/
  @Schema(description = "User's Avatar Image URL")
  public String getAvatar() {
    return avatar;
  }

  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }

  public RdbUser type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * User&#x27;s Premium Status
   * @return type
  **/
  @Schema(description = "User's Premium Status")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public RdbUser premium(Integer premium) {
    this.premium = premium;
    return this;
  }

   /**
   * User&#x27;s emaining time as a premium user in seconds
   * @return premium
  **/
  @Schema(description = "User's emaining time as a premium user in seconds")
  public Integer getPremium() {
    return premium;
  }

  public void setPremium(Integer premium) {
    this.premium = premium;
  }

  public RdbUser expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * Date at which the user loses their premium status
   * @return expiration
  **/
  @Schema(description = "Date at which the user loses their premium status")
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RdbUser rdbUser = (RdbUser) o;
    return Objects.equals(this.id, rdbUser.id) &&
        Objects.equals(this.username, rdbUser.username) &&
        Objects.equals(this.email, rdbUser.email) &&
        Objects.equals(this.points, rdbUser.points) &&
        Objects.equals(this.locale, rdbUser.locale) &&
        Objects.equals(this.avatar, rdbUser.avatar) &&
        Objects.equals(this.type, rdbUser.type) &&
        Objects.equals(this.premium, rdbUser.premium) &&
        Objects.equals(this.expiration, rdbUser.expiration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, username, email, points, locale, avatar, type, premium, expiration);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RdbUser {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    premium: ").append(toIndentedString(premium)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
