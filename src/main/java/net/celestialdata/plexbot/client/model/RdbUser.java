/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package net.celestialdata.plexbot.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.net.URI;
import java.util.Objects;

/**
 * Real-Debrid User
 */
@ApiModel(description = "Real-Debrid User")
@javax.annotation.
        Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2021-02-18T23:30:04.504837-06:00[America/Chicago]")
public class RdbUser {
    public static final String SERIALIZED_NAME_ID = "id";
    public static final String SERIALIZED_NAME_USERNAME = "username";
    public static final String SERIALIZED_NAME_EMAIL = "email";
    public static final String SERIALIZED_NAME_POINTS = "points";
    public static final String SERIALIZED_NAME_LOCALE = "locale";
    public static final String SERIALIZED_NAME_AVATAR = "avatar";
    public static final String SERIALIZED_NAME_TYPE = "type";
    public static final String SERIALIZED_NAME_PREMIUM = "premium";
    public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
    @SerializedName(SERIALIZED_NAME_ID)
    private Integer id;
    @SerializedName(SERIALIZED_NAME_USERNAME)
    private String username;
    @SerializedName(SERIALIZED_NAME_EMAIL)
    private String email;
    @SerializedName(SERIALIZED_NAME_POINTS)
    private Integer points;
    @SerializedName(SERIALIZED_NAME_LOCALE)
    private String locale;
    @SerializedName(SERIALIZED_NAME_AVATAR)
    private URI avatar;
    @SerializedName(SERIALIZED_NAME_TYPE)
    private TypeEnum type;
    @SerializedName(SERIALIZED_NAME_PREMIUM)
    private Integer premium;
    @SerializedName(SERIALIZED_NAME_EXPIRATION)
    private String expiration;

    @SuppressWarnings("unused")
    public RdbUser id(Integer id) {

        this.id = id;
        return this;
    }

    /**
     * User&#39;s ID
     *
     * @return id
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "User's ID")

    public Integer getId() {
        return id;
    }

    @SuppressWarnings("unused")
    public void setId(Integer id) {
        this.id = id;
    }

    @SuppressWarnings("unused")
    public RdbUser username(String username) {

        this.username = username;
        return this;
    }

    /**
     * User&#39;s Username
     *
     * @return username
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "User's Username")

    public String getUsername() {
        return username;
    }

    @SuppressWarnings("unused")
    public void setUsername(String username) {
        this.username = username;
    }

    @SuppressWarnings("unused")
    public RdbUser email(String email) {

        this.email = email;
        return this;
    }

    /**
     * User&#39;s Email
     *
     * @return email
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "User's Email")

    public String getEmail() {
        return email;
    }

    @SuppressWarnings("unused")
    public void setEmail(String email) {
        this.email = email;
    }

    @SuppressWarnings("unused")
    public RdbUser points(Integer points) {

        this.points = points;
        return this;
    }

    /**
     * User&#39;s Fidelity Points
     *
     * @return points
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "User's Fidelity Points")

    public Integer getPoints() {
        return points;
    }

    @SuppressWarnings("unused")
    public void setPoints(Integer points) {
        this.points = points;
    }

    @SuppressWarnings("unused")
    public RdbUser locale(String locale) {

        this.locale = locale;
        return this;
    }

    /**
     * User&#39;s Language
     *
     * @return locale
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "User's Language")

    public String getLocale() {
        return locale;
    }

    @SuppressWarnings("unused")
    public void setLocale(String locale) {
        this.locale = locale;
    }

    @SuppressWarnings("unused")
    public RdbUser avatar(URI avatar) {

        this.avatar = avatar;
        return this;
    }

    /**
     * User&#39;s Avatar Image URL
     *
     * @return avatar
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "User's Avatar Image URL")

    public URI getAvatar() {
        return avatar;
    }

    @SuppressWarnings("unused")
    public void setAvatar(URI avatar) {
        this.avatar = avatar;
    }

    @SuppressWarnings("unused")
    public RdbUser type(TypeEnum type) {

        this.type = type;
        return this;
    }

    /**
     * User&#39;s Premium Status
     *
     * @return type
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "User's Premium Status")

    public TypeEnum getType() {
        return type;
    }

    @SuppressWarnings("unused")
    public void setType(TypeEnum type) {
        this.type = type;
    }

    @SuppressWarnings("unused")
    public RdbUser premium(Integer premium) {

        this.premium = premium;
        return this;
    }

    /**
     * User&#39;s emaining time as a premium user in seconds
     *
     * @return premium
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "User's emaining time as a premium user in seconds")

    public Integer getPremium() {
        return premium;
    }

    @SuppressWarnings("unused")
    public void setPremium(Integer premium) {
        this.premium = premium;
    }

    @SuppressWarnings("unused")
    public RdbUser expiration(String expiration) {

        this.expiration = expiration;
        return this;
    }

    /**
     * Date at which the user loses their premium status
     *
     * @return expiration
     **/
    @SuppressWarnings("unused")
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Date at which the user loses their premium status")

    public String getExpiration() {
        return expiration;
    }

    @SuppressWarnings("unused")
    public void setExpiration(String expiration) {
        this.expiration = expiration;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RdbUser rdbUser = (RdbUser) o;
        return Objects.equals(this.id, rdbUser.id) &&
                Objects.equals(this.username, rdbUser.username) &&
                Objects.equals(this.email, rdbUser.email) &&
                Objects.equals(this.points, rdbUser.points) &&
                Objects.equals(this.locale, rdbUser.locale) &&
                Objects.equals(this.avatar, rdbUser.avatar) &&
                Objects.equals(this.type, rdbUser.type) &&
                Objects.equals(this.premium, rdbUser.premium) &&
                Objects.equals(this.expiration, rdbUser.expiration);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, username, email, points, locale, avatar, type,
                premium, expiration);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RdbUser {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    username: ").append(toIndentedString(username)).append("\n");
        sb.append("    email: ").append(toIndentedString(email)).append("\n");
        sb.append("    points: ").append(toIndentedString(points)).append("\n");
        sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
        sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    premium: ").append(toIndentedString(premium)).append("\n");
        sb.append("    expiration: ")
                .append(toIndentedString(expiration))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * User&#39;s Premium Status
     */
    @JsonAdapter(TypeEnum.Adapter.class)
    public enum TypeEnum {
        PREMIUM("premium"),

        FREE("free");

        private final String value;

        @SuppressWarnings("unused")
        TypeEnum(String value) {
            this.value = value;
        }

        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @SuppressWarnings("unused")
        public static class Adapter extends TypeAdapter<TypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TypeEnum.fromValue(value);
            }
        }
    }
}
