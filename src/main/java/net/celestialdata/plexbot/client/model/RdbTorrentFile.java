/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.celestialdata.plexbot.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import javax.annotation.processing.Generated;
import java.io.IOException;
import java.util.Objects;

/**
 * Information about a file within a real-debrid torrent
 */
@Schema(description = "Information about a file within a real-debrid torrent")
@Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-18T04:51:41.119Z[GMT]")
public class RdbTorrentFile {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("bytes")
  private Integer bytes = null;

  /**
   * Status of file selection
   */
  @JsonAdapter(SelectedEnum.Adapter.class)
  public enum SelectedEnum {
    NUMBER_0(0),
    NUMBER_1(1);

    private Integer value;

    SelectedEnum(Integer value) {
      this.value = value;
    }
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SelectedEnum fromValue(String text) {
      for (SelectedEnum b : SelectedEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SelectedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SelectedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SelectedEnum read(final JsonReader jsonReader) throws IOException {
        Integer value = jsonReader.nextInt();
        return SelectedEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("selected")
  private SelectedEnum selected = null;

  public RdbTorrentFile id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * File ID
   * @return id
  **/
  @Schema(description = "File ID")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public RdbTorrentFile path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Path to the file within the torrent folder
   * @return path
  **/
  @Schema(description = "Path to the file within the torrent folder")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public RdbTorrentFile bytes(Integer bytes) {
    this.bytes = bytes;
    return this;
  }

   /**
   * Size of file in bytes
   * @return bytes
  **/
  @Schema(description = "Size of file in bytes")
  public Integer getBytes() {
    return bytes;
  }

  public void setBytes(Integer bytes) {
    this.bytes = bytes;
  }

  public RdbTorrentFile selected(SelectedEnum selected) {
    this.selected = selected;
    return this;
  }

   /**
   * Status of file selection
   * @return selected
  **/
  @Schema(description = "Status of file selection")
  public SelectedEnum getSelected() {
    return selected;
  }

  public void setSelected(SelectedEnum selected) {
    this.selected = selected;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RdbTorrentFile rdbTorrentFile = (RdbTorrentFile) o;
    return Objects.equals(this.id, rdbTorrentFile.id) &&
        Objects.equals(this.path, rdbTorrentFile.path) &&
        Objects.equals(this.bytes, rdbTorrentFile.bytes) &&
        Objects.equals(this.selected, rdbTorrentFile.selected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, path, bytes, selected);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RdbTorrentFile {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    bytes: ").append(toIndentedString(bytes)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
