/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.celestialdata.plexbot.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import javax.annotation.processing.Generated;
import java.io.IOException;
import java.util.Objects;

/**
 * Information about a file within a real-debrid torrent
 */
@SuppressWarnings("unused")
@Generated(value = "net.celestialdata.plexbot.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-23T04:57:45.670Z[GMT]")
public class RdbTorrentFile {
    @SerializedName("id")
    private Integer id = null;

    @SerializedName("path")
    private String path = null;

    @SerializedName("bytes")
    private Long bytes = null;
    @SerializedName("selected")
    private SelectedEnum selected = null;

    @SuppressWarnings("unused")
    public RdbTorrentFile id(Integer id) {
        this.id = id;
        return this;
    }

    /**
     * File ID
     *
     * @return id
     **/
    @SuppressWarnings("unused")
    public Integer getId() {
        return id;
    }

    @SuppressWarnings("unused")
    public void setId(Integer id) {
        this.id = id;
    }

    @SuppressWarnings("unused")
    public RdbTorrentFile path(String path) {
        this.path = path;
        return this;
    }

    /**
     * Path to the file within the torrent folder
     *
     * @return path
     **/
    @SuppressWarnings("unused")
    public String getPath() {
        return path;
    }

    @SuppressWarnings("unused")
    public void setPath(String path) {
        this.path = path;
    }

    @SuppressWarnings("unused")
    public RdbTorrentFile bytes(Long bytes) {
        this.bytes = bytes;
        return this;
    }

    /**
     * Size of file in bytes
     *
     * @return bytes
     **/
    @SuppressWarnings("unused")
    public Long getBytes() {
        return bytes;
    }

    @SuppressWarnings("unused")
    public void setBytes(Long bytes) {
        this.bytes = bytes;
    }

    @SuppressWarnings("unused")
    public RdbTorrentFile selected(SelectedEnum selected) {
        this.selected = selected;
        return this;
    }

    /**
     * Status of file selection
     *
     * @return selected
     **/
    @SuppressWarnings("unused")
    public SelectedEnum getSelected() {
        return selected;
    }

    @SuppressWarnings("unused")
    public void setSelected(SelectedEnum selected) {
        this.selected = selected;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RdbTorrentFile rdbTorrentFile = (RdbTorrentFile) o;
        return Objects.equals(this.id, rdbTorrentFile.id) &&
                Objects.equals(this.path, rdbTorrentFile.path) &&
                Objects.equals(this.bytes, rdbTorrentFile.bytes) &&
                Objects.equals(this.selected, rdbTorrentFile.selected);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, path, bytes, selected);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RdbTorrentFile {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    path: ").append(toIndentedString(path)).append("\n");
        sb.append("    bytes: ").append(toIndentedString(bytes)).append("\n");
        sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Status of file selection
     */
    @JsonAdapter(SelectedEnum.Adapter.class)
    public enum SelectedEnum {
        NUMBER_0(0),
        NUMBER_1(1);

        private final Integer value;

        @SuppressWarnings("unused")
        SelectedEnum(Integer value) {
            this.value = value;
        }

        public static SelectedEnum fromValue(String text) {
            for (SelectedEnum b : SelectedEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public Integer getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @SuppressWarnings("unused")
        public static class Adapter extends TypeAdapter<SelectedEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final SelectedEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public SelectedEnum read(final JsonReader jsonReader) throws IOException {
                Integer value = jsonReader.nextInt();
                return SelectedEnum.fromValue(String.valueOf(value));
            }
        }
    }

}
