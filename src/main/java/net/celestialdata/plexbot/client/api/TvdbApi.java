/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package net.celestialdata.plexbot.client.api;

import com.google.gson.reflect.TypeToken;
import net.celestialdata.plexbot.client.*;
import net.celestialdata.plexbot.client.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TvdbApi {
    private ApiClient localVarApiClient;

    public TvdbApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TvdbApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getEpisode
     *
     * @param id        id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getEpisodeCall(Long id, final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/episodes/{id}".replaceAll(
                "\\{"
                        + "id"
                        + "\\}",
                localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"tvdbToken"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEpisodeValidateBeforeCall(Long id,
                                                      final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getEpisode(Async)");
        }

        okhttp3.Call localVarCall = getEpisodeCall(id, _callback);
        return localVarCall;
    }

    /**
     * TVDB - Get Episode
     * Returns episode base record
     *
     * @param id id (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public InlineResponse200 getEpisode(Long id) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp;

        // If there was an auth failure, reload the auth credentials and try again
        try {
            localVarResp = getEpisodeWithHttpInfo(id);
            return localVarResp.getData();
        } catch (ApiException e) {
            if (e.getCode() == 401) {
                BotClient.refreshClient();
                localVarResp = getEpisodeWithHttpInfo(id);
                return localVarResp.getData();
            } else throw e;
        }
    }

    /**
     * TVDB - Get Episode
     * Returns episode base record
     *
     * @param id id (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<InlineResponse200> getEpisodeWithHttpInfo(Long id)
            throws ApiException {
        okhttp3.Call localVarCall = getEpisodeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TVDB - Get Episode (asynchronously)
     * Returns episode base record
     *
     * @param id        id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    getEpisodeAsync(Long id, final ApiCallback<InlineResponse200> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getEpisodeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getEpisodeExtended
     *
     * @param id        id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getEpisodeExtendedCall(Long id,
                                               final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/episodes/{id}/extended".replaceAll(
                "\\{"
                        + "id"
                        + "\\}",
                localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"tvdbToken"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call
    getEpisodeExtendedValidateBeforeCall(Long id, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getEpisodeExtended(Async)");
        }

        okhttp3.Call localVarCall = getEpisodeExtendedCall(id, _callback);
        return localVarCall;
    }

    /**
     * TVDB - Get Episode (Extended)
     * Returns episode extended record
     *
     * @param id id (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public InlineResponse2001 getEpisodeExtended(Long id) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp;

        try {
            localVarResp = getEpisodeExtendedWithHttpInfo(id);;
            return localVarResp.getData();
        } catch (ApiException e) {
            if (e.getCode() == 401) {
                BotClient.refreshClient();
                localVarResp = getEpisodeExtendedWithHttpInfo(id);;
                return localVarResp.getData();
            } else throw e;
        }
    }

    /**
     * TVDB - Get Episode (Extended)
     * Returns episode extended record
     *
     * @param id id (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<InlineResponse2001> getEpisodeExtendedWithHttpInfo(Long id)
            throws ApiException {
        okhttp3.Call localVarCall = getEpisodeExtendedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TVDB - Get Episode (Extended) (asynchronously)
     * Returns episode extended record
     *
     * @param id        id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    getEpisodeExtendedAsync(Long id,
                            final ApiCallback<InlineResponse2001> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getEpisodeExtendedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getMovie
     *
     * @param id        id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMovieCall(Long id, final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/movies/{id}".replaceAll(
                "\\{"
                        + "id"
                        + "\\}",
                localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"tvdbToken"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMovieValidateBeforeCall(Long id,
                                                    final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getMovie(Async)");
        }

        okhttp3.Call localVarCall = getMovieCall(id, _callback);
        return localVarCall;
    }

    /**
     * TVDB - Get Movie
     * Returns movie base record
     *
     * @param id id (required)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public InlineResponse2003 getMovie(Long id) throws ApiException {
        ApiResponse<InlineResponse2003> localVarResp;

        try {
            localVarResp = getMovieWithHttpInfo(id);
            return localVarResp.getData();
        } catch (ApiException e) {
            if (e.getCode() == 401) {
                BotClient.refreshClient();
                localVarResp = getMovieWithHttpInfo(id);
                return localVarResp.getData();
            } else throw e;
        }
    }

    /**
     * TVDB - Get Movie
     * Returns movie base record
     *
     * @param id id (required)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<InlineResponse2003> getMovieWithHttpInfo(Long id)
            throws ApiException {
        okhttp3.Call localVarCall = getMovieValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TVDB - Get Movie (asynchronously)
     * Returns movie base record
     *
     * @param id        id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    getMovieAsync(Long id, final ApiCallback<InlineResponse2003> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getMovieValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2003>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getMovieExtended
     *
     * @param id        id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMovieExtendedCall(Long id, final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/movies/{id}/extended".replaceAll(
                "\\{"
                        + "id"
                        + "\\}",
                localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"tvdbToken"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call
    getMovieExtendedValidateBeforeCall(Long id, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getMovieExtended(Async)");
        }

        okhttp3.Call localVarCall = getMovieExtendedCall(id, _callback);
        return localVarCall;
    }

    /**
     * TVDB - Get Movie (Extended)
     * Returns movie extended record
     *
     * @param id id (required)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public InlineResponse2004 getMovieExtended(Long id) throws ApiException {
        ApiResponse<InlineResponse2004> localVarResp;

        try {
            localVarResp = getMovieExtendedWithHttpInfo(id);
            return localVarResp.getData();
        } catch (ApiException e) {
            if (e.getCode() == 401) {
                BotClient.refreshClient();
                localVarResp = getMovieExtendedWithHttpInfo(id);
                return localVarResp.getData();
            } else throw e;
        }
    }

    /**
     * TVDB - Get Movie (Extended)
     * Returns movie extended record
     *
     * @param id id (required)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<InlineResponse2004> getMovieExtendedWithHttpInfo(Long id)
            throws ApiException {
        okhttp3.Call localVarCall = getMovieExtendedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TVDB - Get Movie (Extended) (asynchronously)
     * Returns movie extended record
     *
     * @param id        id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    getMovieExtendedAsync(Long id,
                          final ApiCallback<InlineResponse2004> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getMovieExtendedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2004>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getSeason
     *
     * @param id        id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSeasonCall(Long id, final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seasons/{id}".replaceAll(
                "\\{"
                        + "id"
                        + "\\}",
                localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"tvdbToken"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeasonValidateBeforeCall(Long id,
                                                     final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getSeason(Async)");
        }

        okhttp3.Call localVarCall = getSeasonCall(id, _callback);
        return localVarCall;
    }

    /**
     * TVDB - Get Season
     * Returns season base record
     *
     * @param id id (required)
     * @return InlineResponse2006
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public InlineResponse2006 getSeason(Long id) throws ApiException {
        ApiResponse<InlineResponse2006> localVarResp;

        try {
            localVarResp = getSeasonWithHttpInfo(id);
            return localVarResp.getData();
        } catch (ApiException e) {
            if (e.getCode() == 401) {
                BotClient.refreshClient();
                localVarResp = getSeasonWithHttpInfo(id);
                return localVarResp.getData();
            } else throw e;
        }
    }

    /**
     * TVDB - Get Season
     * Returns season base record
     *
     * @param id id (required)
     * @return ApiResponse&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<InlineResponse2006> getSeasonWithHttpInfo(Long id)
            throws ApiException {
        okhttp3.Call localVarCall = getSeasonValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse2006>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TVDB - Get Season (asynchronously)
     * Returns season base record
     *
     * @param id        id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    getSeasonAsync(Long id, final ApiCallback<InlineResponse2006> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getSeasonValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2006>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getSeasonExtended
     *
     * @param id        id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSeasonExtendedCall(Long id,
                                              final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seasons/{id}/extended".replaceAll(
                "\\{"
                        + "id"
                        + "\\}",
                localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"tvdbToken"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call
    getSeasonExtendedValidateBeforeCall(Long id, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getSeasonExtended(Async)");
        }

        okhttp3.Call localVarCall = getSeasonExtendedCall(id, _callback);
        return localVarCall;
    }

    /**
     * TVDB - Get Season (Extended)
     * Returns season extended record
     *
     * @param id id (required)
     * @return InlineResponse2007
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public InlineResponse2007 getSeasonExtended(Long id) throws ApiException {
        ApiResponse<InlineResponse2007> localVarResp;

        try {
            localVarResp = getSeasonExtendedWithHttpInfo(id);
            return localVarResp.getData();
        } catch (ApiException e) {
            if (e.getCode() == 401) {
                BotClient.refreshClient();
                localVarResp = getSeasonExtendedWithHttpInfo(id);
                return localVarResp.getData();
            } else throw e;
        }
    }

    /**
     * TVDB - Get Season (Extended)
     * Returns season extended record
     *
     * @param id id (required)
     * @return ApiResponse&lt;InlineResponse2007&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<InlineResponse2007> getSeasonExtendedWithHttpInfo(Long id)
            throws ApiException {
        okhttp3.Call localVarCall = getSeasonExtendedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse2007>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TVDB - Get Season (Extended) (asynchronously)
     * Returns season extended record
     *
     * @param id        id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    getSeasonExtendedAsync(Long id,
                           final ApiCallback<InlineResponse2007> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getSeasonExtendedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2007>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getSeries
     *
     * @param id        id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSeriesCall(Long id, final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}".replaceAll(
                "\\{"
                        + "id"
                        + "\\}",
                localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"tvdbToken"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeriesValidateBeforeCall(Long id,
                                                     final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getSeries(Async)");
        }

        okhttp3.Call localVarCall = getSeriesCall(id, _callback);
        return localVarCall;
    }

    /**
     * TVDB - Get Series
     * Returns series base record
     *
     * @param id id (required)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public InlineResponse2008 getSeries(Long id) throws ApiException {
        ApiResponse<InlineResponse2008> localVarResp;

        try {
            localVarResp = getSeriesWithHttpInfo(id);
            return localVarResp.getData();
        } catch (ApiException e) {
            if (e.getCode() == 401) {
                BotClient.refreshClient();
                localVarResp = getSeriesWithHttpInfo(id);
                return localVarResp.getData();
            } else throw e;
        }
    }

    /**
     * TVDB - Get Series
     * Returns series base record
     *
     * @param id id (required)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<InlineResponse2008> getSeriesWithHttpInfo(Long id)
            throws ApiException {
        okhttp3.Call localVarCall = getSeriesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TVDB - Get Series (asynchronously)
     * Returns series base record
     *
     * @param id        id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    getSeriesAsync(Long id, final ApiCallback<InlineResponse2008> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getSeriesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2008>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getSeriesEpisodes
     *
     * @param id        id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSeriesEpisodesCall(Long id,
                                              final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/episodes/official".replaceAll(
                "\\{"
                        + "id"
                        + "\\}",
                localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"tvdbToken"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call
    getSeriesEpisodesValidateBeforeCall(Long id, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getSeriesEpisodes(Async)");
        }

        okhttp3.Call localVarCall = getSeriesEpisodesCall(id, _callback);
        return localVarCall;
    }

    /**
     * TVDB - Get Series Episodes
     * Get a list of episodes for the specified series
     *
     * @param id id (required)
     * @return InlineResponse20010
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public InlineResponse20010 getSeriesEpisodes(Long id) throws ApiException {
        ApiResponse<InlineResponse20010> localVarResp;

        try {
            localVarResp = getSeriesEpisodesWithHttpInfo(id);
            return localVarResp.getData();
        } catch (ApiException e) {
            if (e.getCode() == 401) {
                BotClient.refreshClient();
                localVarResp = getSeriesEpisodesWithHttpInfo(id);
                return localVarResp.getData();
            } else throw e;
        }
    }

    /**
     * TVDB - Get Series Episodes
     * Get a list of episodes for the specified series
     *
     * @param id id (required)
     * @return ApiResponse&lt;InlineResponse20010&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<InlineResponse20010> getSeriesEpisodesWithHttpInfo(Long id)
            throws ApiException {
        okhttp3.Call localVarCall = getSeriesEpisodesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse20010>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TVDB - Get Series Episodes (asynchronously)
     * Get a list of episodes for the specified series
     *
     * @param id        id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    getSeriesEpisodesAsync(Long id,
                           final ApiCallback<InlineResponse20010> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getSeriesEpisodesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20010>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getSeriesExtended
     *
     * @param id        id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSeriesExtendedCall(Long id,
                                              final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/extended".replaceAll(
                "\\{"
                        + "id"
                        + "\\}",
                localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"tvdbToken"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call
    getSeriesExtendedValidateBeforeCall(Long id, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getSeriesExtended(Async)");
        }

        okhttp3.Call localVarCall = getSeriesExtendedCall(id, _callback);
        return localVarCall;
    }

    /**
     * TVDB - Get Series (Extended)
     * Returns series extended record
     *
     * @param id id (required)
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public InlineResponse2009 getSeriesExtended(Long id) throws ApiException {
        ApiResponse<InlineResponse2009> localVarResp;

        try {
            localVarResp = getSeriesExtendedWithHttpInfo(id);
            return localVarResp.getData();
        } catch (ApiException e) {
            if (e.getCode() == 401) {
                BotClient.refreshClient();
                localVarResp = getSeriesExtendedWithHttpInfo(id);
                return localVarResp.getData();
            } else throw e;
        }
    }

    /**
     * TVDB - Get Series (Extended)
     * Returns series extended record
     *
     * @param id id (required)
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<InlineResponse2009> getSeriesExtendedWithHttpInfo(Long id)
            throws ApiException {
        okhttp3.Call localVarCall = getSeriesExtendedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TVDB - Get Series (Extended) (asynchronously)
     * Returns series extended record
     *
     * @param id        id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    getSeriesExtendedAsync(Long id,
                           final ApiCallback<InlineResponse2009> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getSeriesExtendedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2009>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for login
     *
     * @param loginBody API Key and scubscriber API pin used to create an
     *                  authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call loginCall(LoginBody loginBody,
                                  final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = loginBody;

        // create path and map variables
        String localVarPath = "/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(
                localVarPath, "POST", localVarQueryParams,
                localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginValidateBeforeCall(LoginBody loginBody,
                                                 final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'loginBody' is set
        if (loginBody == null) {
            throw new ApiException(
                    "Missing the required parameter 'loginBody' when calling login(Async)");
        }

        okhttp3.Call localVarCall = loginCall(loginBody, _callback);
        return localVarCall;
    }

    /**
     * TVDB - Login
     * Login to the API to get a auth token.
     *
     * @param loginBody API Key and scubscriber API pin used to create an
     *                  authentication token. (required)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public InlineResponse2002 login(LoginBody loginBody) throws ApiException {
        ApiResponse<InlineResponse2002> localVarResp = loginWithHttpInfo(loginBody);
        return localVarResp.getData();
    }

    /**
     * TVDB - Login
     * Login to the API to get a auth token.
     *
     * @param loginBody API Key and scubscriber API pin used to create an
     *                  authentication token. (required)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<InlineResponse2002> loginWithHttpInfo(LoginBody loginBody)
            throws ApiException {
        okhttp3.Call localVarCall = loginValidateBeforeCall(loginBody, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TVDB - Login (asynchronously)
     * Login to the API to get a auth token.
     *
     * @param loginBody API Key and scubscriber API pin used to create an
     *                  authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    loginAsync(LoginBody loginBody,
               final ApiCallback<InlineResponse2002> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = loginValidateBeforeCall(loginBody, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2002>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for tvdbSearch
     *
     * @param q         additional search query param (optional)
     * @param query     additional search query param (optional)
     * @param type      restrict results to entity type movie|series|person|company
     *                  (optional)
     * @param year      restrict results to a year for movie|series (optional)
     * @param offset    offset results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tvdbSearchCall(String q, String query, String type,
                                       Integer year, Integer offset,
                                       final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (query != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("query", query));
        }

        if (type != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("type", type));
        }

        if (year != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("year", year));
        }

        if (offset != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"tvdbToken"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tvdbSearchValidateBeforeCall(String q, String query,
                                                      String type, Integer year,
                                                      Integer offset,
                                                      final ApiCallback _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                tvdbSearchCall(q, query, type, year, offset, _callback);
        return localVarCall;
    }

    /**
     * TVDB - Search
     * Returns a search result record
     *
     * @param q      additional search query param (optional)
     * @param query  additional search query param (optional)
     * @param type   restrict results to entity type movie|series|person|company
     *               (optional)
     * @param year   restrict results to a year for movie|series (optional)
     * @param offset offset results (optional)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public InlineResponse2005 tvdbSearch(String q, String query, String type, Integer year, Integer offset) throws ApiException {
        ApiResponse<InlineResponse2005> localVarResp;

        try {
            localVarResp = tvdbSearchWithHttpInfo(q, query, type, year, offset);
            return localVarResp.getData();
        } catch (ApiException e) {
            if (e.getCode() == 401) {
                BotClient.refreshClient();
                localVarResp = tvdbSearchWithHttpInfo(q, query, type, year, offset);
                return localVarResp.getData();
            } else throw e;
        }
    }

    /**
     * TVDB - Search
     * Returns a search result record
     *
     * @param q      additional search query param (optional)
     * @param query  additional search query param (optional)
     * @param type   restrict results to entity type movie|series|person|company
     *               (optional)
     * @param year   restrict results to a year for movie|series (optional)
     * @param offset offset results (optional)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<InlineResponse2005>
    tvdbSearchWithHttpInfo(String q, String query, String type, Integer year,
                           Integer offset) throws ApiException {
        okhttp3.Call localVarCall =
                tvdbSearchValidateBeforeCall(q, query, type, year, offset, null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TVDB - Search (asynchronously)
     * Returns a search result record
     *
     * @param q         additional search query param (optional)
     * @param query     additional search query param (optional)
     * @param type      restrict results to entity type movie|series|person|company
     *                  (optional)
     * @param year      restrict results to a year for movie|series (optional)
     * @param offset    offset results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tvdbSearchAsync(
            String q, String query, String type, Integer year, Integer offset,
            final ApiCallback<InlineResponse2005> _callback) throws ApiException {

        okhttp3.Call localVarCall =
                tvdbSearchValidateBeforeCall(q, query, type, year, offset, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2005>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
