/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package net.celestialdata.plexbot.client.api;

import com.google.gson.reflect.TypeToken;
import net.celestialdata.plexbot.client.*;
import net.celestialdata.plexbot.client.model.OmdbItem;
import net.celestialdata.plexbot.client.model.OmdbSearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"rawtypes", "ConstantConditions", "unused"})
public class OmdbApi {
    private ApiClient localVarApiClient;

    public OmdbApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OmdbApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getById
     *
     * @param imdbCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    @SuppressWarnings("DuplicatedCode")
    public okhttp3.Call getByIdCall(String imdbCode, final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/?i={imdbCode}".replaceAll(
                "\\{"
                        + "imdbCode"
                        + "}",
                localVarApiClient.escapeString(imdbCode));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"omdbApiKey"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String imdbCode,
                                                   final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'imdbCode' is set
        if (imdbCode == null) {
            throw new ApiException(
                    "Missing the required parameter 'imdbCode' when calling getById(Async)");
        }

        return getByIdCall(imdbCode, _callback);
    }

    /**
     * OMDB - Get information about a movie or TV show by its IMDB ID
     * Get information about a movie or TV show from OMDB by its IMDB ID
     *
     * @param imdbCode (required)
     * @return OmdbItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public OmdbItem getById(String imdbCode) throws ApiException {
        ApiResponse<OmdbItem> localVarResp = getByIdWithHttpInfo(imdbCode);
        return localVarResp.getData();
    }

    /**
     * OMDB - Get information about a movie or TV show by its IMDB ID
     * Get information about a movie or TV show from OMDB by its IMDB ID
     *
     * @param imdbCode (required)
     * @return ApiResponse&lt;OmdbItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<OmdbItem> getByIdWithHttpInfo(String imdbCode)
            throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(imdbCode, null);
        Type localVarReturnType = new TypeToken<OmdbItem>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * OMDB - Get information about a movie or TV show by its IMDB ID
     * (asynchronously)
     * Get information about a movie or TV show from OMDB by its IMDB ID
     *
     * @param imdbCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getByIdAsync(String imdbCode,
                                     final ApiCallback<OmdbItem> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(imdbCode, _callback);
        Type localVarReturnType = new TypeToken<OmdbItem>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for search
     *
     * @param search    (required)
     * @param type      Return movie or series (required)
     * @param y         Year of release (optional)
     * @param page      Page number to return (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Not authenticated </td><td>  -  </td></tr>
     * </table>
     */
    @SuppressWarnings("DuplicatedCode")
    public okhttp3.Call searchCall(String search, String type, Integer y,
                                   Integer page, final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/?s={search}".replaceAll(
                "\\{"
                        + "search"
                        + "}",
                localVarApiClient.escapeString(search));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (y != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("y", y));
        }

        if (type != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("type", type));
        }

        if (page != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"omdbApiKey"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(String search, String type,
                                                  Integer y, Integer page,
                                                  final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException(
                    "Missing the required parameter 'search' when calling search(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException(
                    "Missing the required parameter 'type' when calling search(Async)");
        }

        return searchCall(search, type, y, page, _callback);
    }

    /**
     * OMDB - Search OMDB for a movie or TV show
     * Search OMDB for a movie or TV show
     *
     * @param search (required)
     * @param type   Return movie or series (required)
     * @param y      Year of release (optional)
     * @param page   Page number to return (optional)
     * @return OmdbSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Not authenticated </td><td>  -  </td></tr>
     * </table>
     */
    public OmdbSearchResult search(String search, String type, Integer y,
                                   Integer page) throws ApiException {
        ApiResponse<OmdbSearchResult> localVarResp =
                searchWithHttpInfo(search, type, y, page);
        return localVarResp.getData();
    }

    /**
     * OMDB - Search OMDB for a movie or TV show
     * Search OMDB for a movie or TV show
     *
     * @param search (required)
     * @param type   Return movie or series (required)
     * @param y      Year of release (optional)
     * @param page   Page number to return (optional)
     * @return ApiResponse&lt;OmdbSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Not authenticated </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<OmdbSearchResult>
    searchWithHttpInfo(String search, String type, Integer y, Integer page)
            throws ApiException {
        okhttp3.Call localVarCall =
                searchValidateBeforeCall(search, type, y, page, null);
        Type localVarReturnType = new TypeToken<OmdbSearchResult>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * OMDB - Search OMDB for a movie or TV show (asynchronously)
     * Search OMDB for a movie or TV show
     *
     * @param search    (required)
     * @param type      Return movie or series (required)
     * @param y         Year of release (optional)
     * @param page      Page number to return (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Not authenticated </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call searchAsync(String search, String type, Integer y,
                                    Integer page,
                                    final ApiCallback<OmdbSearchResult> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                searchValidateBeforeCall(search, type, y, page, _callback);
        Type localVarReturnType = new TypeToken<OmdbSearchResult>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
