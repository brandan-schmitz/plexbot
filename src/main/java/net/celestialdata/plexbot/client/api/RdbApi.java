/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package net.celestialdata.plexbot.client.api;

import com.google.gson.reflect.TypeToken;
import net.celestialdata.plexbot.client.*;
import net.celestialdata.plexbot.client.model.*;

import java.lang.reflect.Type;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"unused", "ConstantConditions"})
public class RdbApi {
    private ApiClient localVarApiClient;

    public RdbApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RdbApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addMagnet
     *
     * @param magnet    Magnet link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 400
     * </td><td> Bad Request (see error message) </td><td>  -  </td></tr> <tr><td>
     * 401 </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td>
     * 403 </td><td> Permission denied (account locked, not premium) </td><td>  -
     * </td></tr> <tr><td> 503 </td><td> Service unavailable (see error message)
     * </td><td>  -  </td></tr>
     * </table>
     */
    @SuppressWarnings("DuplicatedCode")
    public okhttp3.Call addMagnetCall(String magnet, @SuppressWarnings("rawtypes") final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/torrents/addMagnet";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (magnet != null) {
            localVarFormParams.put("magnet", magnet);
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"multipart/form-data"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"rdbApiKey"};
        return localVarApiClient.buildCall(
                localVarPath, "POST", localVarQueryParams,
                localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMagnetValidateBeforeCall(String magnet,
                                                     final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'magnet' is set
        if (magnet == null) {
            throw new ApiException(
                    "Missing the required parameter 'magnet' when calling addMagnet(Async)");
        }

        return addMagnetCall(magnet, _callback);
    }

    /**
     * RDB - Add Magnet
     * Add a magnet to Real-Debrid
     *
     * @param magnet Magnet link (required)
     * @return RdbMagnetLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 400
     * </td><td> Bad Request (see error message) </td><td>  -  </td></tr> <tr><td>
     * 401 </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td>
     * 403 </td><td> Permission denied (account locked, not premium) </td><td>  -
     * </td></tr> <tr><td> 503 </td><td> Service unavailable (see error message)
     * </td><td>  -  </td></tr>
     * </table>
     */
    public RdbMagnetLink addMagnet(String magnet) throws ApiException {
        ApiResponse<RdbMagnetLink> localVarResp = addMagnetWithHttpInfo(magnet);
        return localVarResp.getData();
    }

    /**
     * RDB - Add Magnet
     * Add a magnet to Real-Debrid
     *
     * @param magnet Magnet link (required)
     * @return ApiResponse&lt;RdbMagnetLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 400
     * </td><td> Bad Request (see error message) </td><td>  -  </td></tr> <tr><td>
     * 401 </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td>
     * 403 </td><td> Permission denied (account locked, not premium) </td><td>  -
     * </td></tr> <tr><td> 503 </td><td> Service unavailable (see error message)
     * </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RdbMagnetLink> addMagnetWithHttpInfo(String magnet)
            throws ApiException {
        okhttp3.Call localVarCall = addMagnetValidateBeforeCall(magnet, null);
        Type localVarReturnType = new TypeToken<RdbMagnetLink>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RDB - Add Magnet (asynchronously)
     * Add a magnet to Real-Debrid
     *
     * @param magnet    Magnet link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 400
     * </td><td> Bad Request (see error message) </td><td>  -  </td></tr> <tr><td>
     * 401 </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td>
     * 403 </td><td> Permission denied (account locked, not premium) </td><td>  -
     * </td></tr> <tr><td> 503 </td><td> Service unavailable (see error message)
     * </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addMagnetAsync(String magnet,
                                       final ApiCallback<RdbMagnetLink> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = addMagnetValidateBeforeCall(magnet, _callback);
        Type localVarReturnType = new TypeToken<RdbMagnetLink>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteTorrent
     *
     * @param id        Torrent ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 204 </td><td> Torrent Deleted </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Bad token (expired, invalid) </td><td>  -
     * </td></tr> <tr><td> 403 </td><td> Permission denied (account locked)
     * </td><td>  -  </td></tr> <tr><td> 404 </td><td> Unknown Resource </td><td>
     * -  </td></tr>
     * </table>
     */
    @SuppressWarnings("DuplicatedCode")
    public okhttp3.Call deleteTorrentCall(String id, @SuppressWarnings("rawtypes") final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/torrents/delete/{id}".replaceAll(
                "\\{"
                        + "id"
                        + "}",
                localVarApiClient.escapeString(id));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"rdbApiKey"};
        return localVarApiClient.buildCall(
                localVarPath, "DELETE", localVarQueryParams,
                localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call
    deleteTorrentValidateBeforeCall(String id, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling deleteTorrent(Async)");
        }

        return deleteTorrentCall(id, _callback);
    }

    /**
     * Delete a torrent from real-debrid
     *
     * @param id Torrent ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 204 </td><td> Torrent Deleted </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Bad token (expired, invalid) </td><td>  -
     * </td></tr> <tr><td> 403 </td><td> Permission denied (account locked)
     * </td><td>  -  </td></tr> <tr><td> 404 </td><td> Unknown Resource </td><td>
     * -  </td></tr>
     * </table>
     */
    public void deleteTorrent(String id) throws ApiException {
        deleteTorrentWithHttpInfo(id);
    }

    /**
     * Delete a torrent from real-debrid
     *
     * @param id Torrent ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 204 </td><td> Torrent Deleted </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Bad token (expired, invalid) </td><td>  -
     * </td></tr> <tr><td> 403 </td><td> Permission denied (account locked)
     * </td><td>  -  </td></tr> <tr><td> 404 </td><td> Unknown Resource </td><td>
     * -  </td></tr>
     * </table>
     */
    @SuppressWarnings("UnusedReturnValue")
    public ApiResponse<Void> deleteTorrentWithHttpInfo(String id)
            throws ApiException {
        okhttp3.Call localVarCall = deleteTorrentValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * (asynchronously)
     * Delete a torrent from real-debrid
     *
     * @param id        Torrent ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 204 </td><td> Torrent Deleted </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Bad token (expired, invalid) </td><td>  -
     * </td></tr> <tr><td> 403 </td><td> Permission denied (account locked)
     * </td><td>  -  </td></tr> <tr><td> 404 </td><td> Unknown Resource </td><td>
     * -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteTorrentAsync(String id,
                                           final ApiCallback<Void> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = deleteTorrentValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for getTorrentInfo
     *
     * @param id        Torrent ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> Permission denied (account locked) </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Torrent not found </td><td>  -  </td></tr>
     * </table>
     */
    @SuppressWarnings("DuplicatedCode")
    public okhttp3.Call getTorrentInfoCall(String id, @SuppressWarnings("rawtypes") final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/torrents/info/{id}".replaceAll(
                "\\{"
                        + "id"
                        + "}",
                localVarApiClient.escapeString(id));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"rdbApiKey"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call
    getTorrentInfoValidateBeforeCall(String id, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getTorrentInfo(Async)");
        }

        return getTorrentInfoCall(id, _callback);
    }

    /**
     * RDB - Get a torrent&#39;s info
     * Get all information about the specified torrent on real-debrid
     *
     * @param id Torrent ID (required)
     * @return RdbTorrentInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> Permission denied (account locked) </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Torrent not found </td><td>  -  </td></tr>
     * </table>
     */
    public RdbTorrentInfo getTorrentInfo(String id) throws ApiException {
        ApiResponse<RdbTorrentInfo> localVarResp = getTorrentInfoWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * RDB - Get a torrent&#39;s info
     * Get all information about the specified torrent on real-debrid
     *
     * @param id Torrent ID (required)
     * @return ApiResponse&lt;RdbTorrentInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> Permission denied (account locked) </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Torrent not found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RdbTorrentInfo> getTorrentInfoWithHttpInfo(String id)
            throws ApiException {
        okhttp3.Call localVarCall = getTorrentInfoValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RdbTorrentInfo>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RDB - Get a torrent&#39;s info (asynchronously)
     * Get all information about the specified torrent on real-debrid
     *
     * @param id        Torrent ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> Permission denied (account locked) </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Torrent not found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    getTorrentInfoAsync(String id, final ApiCallback<RdbTorrentInfo> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getTorrentInfoValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RdbTorrentInfo>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUser
     *
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> Permission denied (account locked) </td><td>  -  </td></tr>
     * </table>
     */
    @SuppressWarnings("DuplicatedCode")
    public okhttp3.Call getUserCall(@SuppressWarnings("rawtypes") final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"rdbApiKey"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(final ApiCallback _callback)
            throws ApiException {

        return getUserCall(_callback);
    }

    /**
     * RDB - Get Current User
     * Get the current real-debrid user info
     *
     * @return RdbUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> Permission denied (account locked) </td><td>  -  </td></tr>
     * </table>
     */
    public RdbUser getUser() throws ApiException {
        ApiResponse<RdbUser> localVarResp = getUserWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * RDB - Get Current User
     * Get the current real-debrid user info
     *
     * @return ApiResponse&lt;RdbUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> Permission denied (account locked) </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RdbUser> getUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RdbUser>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RDB - Get Current User (asynchronously)
     * Get the current real-debrid user info
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> Permission denied (account locked) </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserAsync(final ApiCallback<RdbUser> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RdbUser>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for selectTorrentFiles
     *
     * @param id        Torrent ID (required)
     * @param files     Selected files IDs (comma separated) or \\\&quot;all\\\&quot;
     *                  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 202 </td><td> Action already done </td><td>  - </td></tr>
     * <tr><td> 204 </td><td> Files Selected </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request (see error message) </td><td>  -
     * </td></tr> <tr><td> 401 </td><td> Bad token (expired, invalid) </td><td>  -
     * </td></tr> <tr><td> 403 </td><td> Permission denied (account locked, not
     * premium) </td><td>  -  </td></tr> <tr><td> 404 </td><td> Wrong parameter
     * (invalid file id(s)) / Unknown Resource (invalid id) </td><td>  - </td></tr>
     * </table>
     */
    @SuppressWarnings("DuplicatedCode")
    public okhttp3.Call selectTorrentFilesCall(String id, String files,
                                               @SuppressWarnings("rawtypes") final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/torrents/selectFiles/{id}".replaceAll(
                "\\{"
                        + "id"
                        + "}",
                localVarApiClient.escapeString(id));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (files != null) {
            localVarFormParams.put("files", files);
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"multipart/form-data"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"rdbApiKey"};
        return localVarApiClient.buildCall(
                localVarPath, "POST", localVarQueryParams,
                localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call
    selectTorrentFilesValidateBeforeCall(String id, String files,
                                         final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling selectTorrentFiles(Async)");
        }

        // verify the required parameter 'files' is set
        if (files == null) {
            throw new ApiException(
                    "Missing the required parameter 'files' when calling selectTorrentFiles(Async)");
        }

        return selectTorrentFilesCall(id, files, _callback);
    }

    /**
     * RDB - Select Torrent Files
     * Select which files included in a torrent should be downloaded by
     * Real-Debrid
     *
     * @param id    Torrent ID (required)
     * @param files Selected files IDs (comma separated) or \\\&quot;all\\\&quot;
     *              (required)
     * @return RdbError
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 202 </td><td> Action already done </td><td>  - </td></tr>
     * <tr><td> 204 </td><td> Files Selected </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request (see error message) </td><td>  -
     * </td></tr> <tr><td> 401 </td><td> Bad token (expired, invalid) </td><td>  -
     * </td></tr> <tr><td> 403 </td><td> Permission denied (account locked, not
     * premium) </td><td>  -  </td></tr> <tr><td> 404 </td><td> Wrong parameter
     * (invalid file id(s)) / Unknown Resource (invalid id) </td><td>  - </td></tr>
     * </table>
     */
    @SuppressWarnings("UnusedReturnValue")
    public RdbError selectTorrentFiles(String id, String files)
            throws ApiException {
        ApiResponse<RdbError> localVarResp =
                selectTorrentFilesWithHttpInfo(id, files);
        return localVarResp.getData();
    }

    /**
     * RDB - Select Torrent Files
     * Select which files included in a torrent should be downloaded by
     * Real-Debrid
     *
     * @param id    Torrent ID (required)
     * @param files Selected files IDs (comma separated) or \\\&quot;all\\\&quot;
     *              (required)
     * @return ApiResponse&lt;RdbError&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 202 </td><td> Action already done </td><td>  - </td></tr>
     * <tr><td> 204 </td><td> Files Selected </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request (see error message) </td><td>  -
     * </td></tr> <tr><td> 401 </td><td> Bad token (expired, invalid) </td><td>  -
     * </td></tr> <tr><td> 403 </td><td> Permission denied (account locked, not
     * premium) </td><td>  -  </td></tr> <tr><td> 404 </td><td> Wrong parameter
     * (invalid file id(s)) / Unknown Resource (invalid id) </td><td>  - </td></tr>
     * </table>
     */
    public ApiResponse<RdbError> selectTorrentFilesWithHttpInfo(String id,
                                                                String files)
            throws ApiException {
        okhttp3.Call localVarCall =
                selectTorrentFilesValidateBeforeCall(id, files, null);
        Type localVarReturnType = new TypeToken<RdbError>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RDB - Select Torrent Files (asynchronously)
     * Select which files included in a torrent should be downloaded by
     * Real-Debrid
     *
     * @param id        Torrent ID (required)
     * @param files     Selected files IDs (comma separated) or \\\&quot;all\\\&quot;
     *                  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 202 </td><td> Action already done </td><td>  - </td></tr>
     * <tr><td> 204 </td><td> Files Selected </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request (see error message) </td><td>  -
     * </td></tr> <tr><td> 401 </td><td> Bad token (expired, invalid) </td><td>  -
     * </td></tr> <tr><td> 403 </td><td> Permission denied (account locked, not
     * premium) </td><td>  -  </td></tr> <tr><td> 404 </td><td> Wrong parameter
     * (invalid file id(s)) / Unknown Resource (invalid id) </td><td>  - </td></tr>
     * </table>
     */
    public okhttp3.Call
    selectTorrentFilesAsync(String id, String files,
                            final ApiCallback<RdbError> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                selectTorrentFilesValidateBeforeCall(id, files, _callback);
        Type localVarReturnType = new TypeToken<RdbError>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for unrestrictLink
     *
     * @param link      The original hoster link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> Permission denied (account locked) </td><td>  -  </td></tr>
     * </table>
     */
    @SuppressWarnings("DuplicatedCode")
    public okhttp3.Call unrestrictLinkCall(URI link, @SuppressWarnings("rawtypes") final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unrestrict/link";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (link != null) {
            localVarFormParams.put("link", link);
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"multipart/form-data"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"rdbApiKey"};
        return localVarApiClient.buildCall(
                localVarPath, "POST", localVarQueryParams,
                localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call
    unrestrictLinkValidateBeforeCall(URI link, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'link' is set
        if (link == null) {
            throw new ApiException(
                    "Missing the required parameter 'link' when calling unrestrictLink(Async)");
        }

        return unrestrictLinkCall(link, _callback);
    }

    /**
     * RDB - Unrestrict a link
     * Unrestrict a real-debrid download link so it can be downloaded
     *
     * @param link The original hoster link (required)
     * @return RdbUnrestrictedLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> Permission denied (account locked) </td><td>  -  </td></tr>
     * </table>
     */
    public RdbUnrestrictedLink unrestrictLink(URI link) throws ApiException {
        ApiResponse<RdbUnrestrictedLink> localVarResp =
                unrestrictLinkWithHttpInfo(link);
        return localVarResp.getData();
    }

    /**
     * RDB - Unrestrict a link
     * Unrestrict a real-debrid download link so it can be downloaded
     *
     * @param link The original hoster link (required)
     * @return ApiResponse&lt;RdbUnrestrictedLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> Permission denied (account locked) </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RdbUnrestrictedLink> unrestrictLinkWithHttpInfo(URI link)
            throws ApiException {
        okhttp3.Call localVarCall = unrestrictLinkValidateBeforeCall(link, null);
        Type localVarReturnType = new TypeToken<RdbUnrestrictedLink>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RDB - Unrestrict a link (asynchronously)
     * Unrestrict a real-debrid download link so it can be downloaded
     *
     * @param link      The original hoster link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Bad token (expired, invalid) </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> Permission denied (account locked) </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    unrestrictLinkAsync(URI link,
                        final ApiCallback<RdbUnrestrictedLink> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                unrestrictLinkValidateBeforeCall(link, _callback);
        Type localVarReturnType = new TypeToken<RdbUnrestrictedLink>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
