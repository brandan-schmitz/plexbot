/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.celestialdata.plexbot.client.api;

import com.google.gson.reflect.TypeToken;
import net.celestialdata.plexbot.client.*;
import net.celestialdata.plexbot.client.model.PlexUser;
import net.celestialdata.plexbot.config.ConfigProvider;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"unused", "UnusedReturnValue"})
public class PlexApi {
    private ApiClient apiClient;

    public PlexApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlexApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for refreshLibraries
     *
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    @SuppressWarnings("DuplicatedCode")
    public com.squareup.okhttp.Call refreshLibrariesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // Set the base path to the plex server
        this.apiClient.setBasePath("http://" + ConfigProvider.PLEX_SERVER_SETTINGS.ipAddress() + ":" + ConfigProvider.PLEX_SERVER_SETTINGS.port());

        // create path and map variables
        String localVarPath = "/library/sections/all/refresh";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-Plex-Product", "Plexbot for Discord");
        localVarHeaderParams.put("X-Plex-Version", getClass().getPackage().getImplementationVersion());
        localVarHeaderParams.put("X-Plex-Device", System.getProperty("os.name"));
        localVarHeaderParams.put("X-Plex-Platform", System.getProperty("os.name"));
        localVarHeaderParams.put("X-Plex-Platform-Version", System.getProperty("os.version"));
        localVarHeaderParams.put("X-Plex-Device-Name", "Plexbot");

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"plexAuthToken", "plexClientIdentifier"};
        //noinspection ConstantConditions
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call refreshLibrariesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        return refreshLibrariesCall(progressListener, progressRequestListener);


    }

    /**
     * Plex - Refresh Libraries
     * Scan all media libraries on the Plex server to index new media.
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void refreshLibraries() throws ApiException {
        // If there was an auth failure, reload the auth credentials and try again
        try {
            refreshLibrariesWithHttpInfo();
        } catch (ApiException e) {
            if (e.getCode() == 401) {
                BotClient.refreshClient();
                refreshLibrariesWithHttpInfo();
            }
        }
    }

    /**
     * Plex - Refresh Libraries
     * Scan all media libraries on the Plex server to index new media.
     *
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> refreshLibrariesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = refreshLibrariesValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Plex - Refresh Libraries (asynchronously)
     * Scan all media libraries on the Plex server to index new media.
     *
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call refreshLibrariesAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = refreshLibrariesValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for signIn
     *
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    @SuppressWarnings("DuplicatedCode")
    public com.squareup.okhttp.Call signInCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // Set the base path to the plex server
        this.apiClient.setBasePath("https://plex.tv");

        // create path and map variables
        String localVarPath = "/users/sign_in.json";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-Plex-Product", "Plexbot for Discord");
        localVarHeaderParams.put("X-Plex-Version", getClass().getPackage().getImplementationVersion());
        localVarHeaderParams.put("X-Plex-Device", System.getProperty("os.name"));
        localVarHeaderParams.put("X-Plex-Platform", System.getProperty("os.name"));
        localVarHeaderParams.put("X-Plex-Platform-Version", System.getProperty("os.version"));
        localVarHeaderParams.put("X-Plex-Device-Name", "Plexbot");

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"plexAuth", "plexClientIdentifier"};
        //noinspection ConstantConditions
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call signInValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        return signInCall(progressListener, progressRequestListener);


    }

    /**
     * Plex - Sign In
     * Sign into a plex account and get a User object
     *
     * @return PlexUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlexUser signIn() throws ApiException {
        ApiResponse<PlexUser> resp = signInWithHttpInfo();
        return resp.getData();
    }

    /**
     * Plex - Sign In
     * Sign into a plex account and get a User object
     *
     * @return ApiResponse&lt;PlexUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlexUser> signInWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = signInValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<PlexUser>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Plex - Sign In (asynchronously)
     * Sign into a plex account and get a User object
     *
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signInAsync(final ApiCallback<PlexUser> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = signInValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlexUser>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
