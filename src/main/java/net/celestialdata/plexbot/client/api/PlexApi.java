/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package net.celestialdata.plexbot.client.api;

import com.google.gson.reflect.TypeToken;
import net.celestialdata.plexbot.client.*;
import net.celestialdata.plexbot.client.model.PlexUser;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlexApi {
    private ApiClient localVarApiClient;

    public PlexApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlexApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for signIn
     *
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Unauthorized </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call signInCall(final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/sign_in.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames =
                new String[]{"plexAuth", "plexClientIdentifier"};
        return localVarApiClient.buildCall(
                localVarPath, "POST", localVarQueryParams,
                localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signInValidateBeforeCall(final ApiCallback _callback)
            throws ApiException {

        okhttp3.Call localVarCall = signInCall(_callback);
        return localVarCall;
    }

    /**
     * Plex - Sign In
     * Sign into a plex account and get a User object
     *
     * @return PlexUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Unauthorized </td><td>  -  </td></tr>
     * </table>
     */
    public PlexUser signIn() throws ApiException {
        ApiResponse<PlexUser> localVarResp = signInWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Plex - Sign In
     * Sign into a plex account and get a User object
     *
     * @return ApiResponse&lt;PlexUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Unauthorized </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<PlexUser> signInWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = signInValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PlexUser>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Plex - Sign In (asynchronously)
     * Sign into a plex account and get a User object
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Unauthorized </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call signInAsync(final ApiCallback<PlexUser> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = signInValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PlexUser>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
