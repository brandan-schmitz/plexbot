/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package net.celestialdata.plexbot.client.api;

import com.google.gson.reflect.TypeToken;
import net.celestialdata.plexbot.Main;
import net.celestialdata.plexbot.client.*;
import net.celestialdata.plexbot.client.auth.CloudflareAuthorizer;
import net.celestialdata.plexbot.client.model.YtsBaseResponse;
import net.celestialdata.plexbot.configuration.BotConfig;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.impl.client.HttpClients;
import org.javacord.api.entity.message.MessageBuilder;
import org.javacord.api.entity.message.MessageDecoration;

import javax.script.ScriptException;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"ConstantConditions", "unused"})
public class YtsApi {
    private ApiClient localVarApiClient;

    public YtsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public YtsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private static String getCloudflareClearanceCode() {
        String clearanceCode = "";

        CloudflareAuthorizer cloudflareAuthorizer = new CloudflareAuthorizer(HttpClients.createDefault(), HttpClientContext.create());
        try {
            if (cloudflareAuthorizer.tryAuthorization(BotConfig.getInstance().currentYtsDomain())) {
                clearanceCode = cloudflareAuthorizer.getClearanceCookie();
            }
        } catch (IOException | ScriptException e) {
            new MessageBuilder()
                    .append("An error has occurred while performing the following task:", MessageDecoration.BOLD)
                    .appendCode("", "YTS Cloudflare Authorization")
                    .appendCode("java", ExceptionUtils.getMessage(e))
                    .appendCode("java", ExceptionUtils.getStackTrace(e))
                    .send(Main.getBotApi().getUserById(BotConfig.getInstance().adminUserId()).join());
        }

        return clearanceCode;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for searchYts
     *
     * @param queryTerm Search by Movie Title/IMDb Code, Actor Name/IMDb Code,
     *                  Director Name/IMDb Code  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    @SuppressWarnings("DuplicatedCode")
    public okhttp3.Call searchYtsCall(String queryTerm,
                                      @SuppressWarnings("rawtypes") final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list_movies.json";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (queryTerm != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("query_term", queryTerm));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("cf_authorization", getCloudflareClearanceCode());

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchYtsValidateBeforeCall(String queryTerm,
                                                     final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'queryTerm' is set
        if (queryTerm == null) {
            throw new ApiException(
                    "Missing the required parameter 'queryTerm' when calling searchYts(Async)");
        }

        return searchYtsCall(queryTerm, _callback);
    }

    /**
     * YTS - Search for a movie
     * Get the information for a movie from YTS if it is available.
     *
     * @param queryTerm Search by Movie Title/IMDb Code, Actor Name/IMDb Code,
     *                  Director Name/IMDb Code  (required)
     * @return YtsBaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public YtsBaseResponse searchYts(String queryTerm) throws ApiException {
        ApiResponse<YtsBaseResponse> localVarResp =
                searchYtsWithHttpInfo(queryTerm);
        return localVarResp.getData();
    }

    /**
     * YTS - Search for a movie
     * Get the information for a movie from YTS if it is available.
     *
     * @param queryTerm Search by Movie Title/IMDb Code, Actor Name/IMDb Code,
     *                  Director Name/IMDb Code  (required)
     * @return ApiResponse&lt;YtsBaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<YtsBaseResponse> searchYtsWithHttpInfo(String queryTerm)
            throws ApiException {
        okhttp3.Call localVarCall = searchYtsValidateBeforeCall(queryTerm, null);
        Type localVarReturnType = new TypeToken<YtsBaseResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * YTS - Search for a movie (asynchronously)
     * Get the information for a movie from YTS if it is available.
     *
     * @param queryTerm Search by Movie Title/IMDb Code, Actor Name/IMDb Code,
     *                  Director Name/IMDb Code  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    searchYtsAsync(String queryTerm, final ApiCallback<YtsBaseResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                searchYtsValidateBeforeCall(queryTerm, _callback);
        Type localVarReturnType = new TypeToken<YtsBaseResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
