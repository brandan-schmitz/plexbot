/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.celestialdata.plexbot.client.api;

import com.google.gson.reflect.TypeToken;
import net.celestialdata.plexbot.BotConfig;
import net.celestialdata.plexbot.client.*;
import net.celestialdata.plexbot.client.auth.CloudflareAuthorizer;
import net.celestialdata.plexbot.client.model.YtsBaseResponse;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.impl.client.HttpClients;

import javax.script.ScriptException;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings("unused")
public class YtsApi {
    private ApiClient apiClient;

    public YtsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public YtsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    private static String getCloudflareClearanceCode() {
        String clearanceCode = "";

        CloudflareAuthorizer cloudflareAuthorizer = new CloudflareAuthorizer(HttpClients.createDefault(), HttpClientContext.create());
        try {
            if (cloudflareAuthorizer.tryAuthorization(BotConfig.getInstance().currentYtsDomain())) {
                clearanceCode = cloudflareAuthorizer.getClearanceCookie();
            }
        } catch (IOException | ScriptException e) {
            e.printStackTrace();
        }

        return clearanceCode;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for searchYts
     *
     * @param queryTerm               Search by Movie Title/IMDb Code, Actor Name/IMDb Code, Director Name/IMDb Code  (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    @SuppressWarnings("DuplicatedCode")
    public com.squareup.okhttp.Call searchYtsCall(String queryTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list_movies.json";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        if (queryTerm != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("query_term", queryTerm));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("cf_authorization", getCloudflareClearanceCode());

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{};
        //noinspection ConstantConditions
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call searchYtsValidateBeforeCall(String queryTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'queryTerm' is set
        if (queryTerm == null) {
            throw new ApiException("Missing the required parameter 'queryTerm' when calling searchYts(Async)");
        }

        return searchYtsCall(queryTerm, progressListener, progressRequestListener);


    }

    /**
     * YTS - Search for a movie
     * Get the information for a movie from YTS if it is available.
     *
     * @param queryTerm Search by Movie Title/IMDb Code, Actor Name/IMDb Code, Director Name/IMDb Code  (required)
     * @return YtsBaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public YtsBaseResponse searchYts(String queryTerm) throws ApiException {
        ApiResponse<YtsBaseResponse> resp = searchYtsWithHttpInfo(queryTerm);
        return resp.getData();
    }

    /**
     * YTS - Search for a movie
     * Get the information for a movie from YTS if it is available.
     *
     * @param queryTerm Search by Movie Title/IMDb Code, Actor Name/IMDb Code, Director Name/IMDb Code  (required)
     * @return ApiResponse&lt;YtsBaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<YtsBaseResponse> searchYtsWithHttpInfo(String queryTerm) throws ApiException {
        com.squareup.okhttp.Call call = searchYtsValidateBeforeCall(queryTerm, null, null);
        Type localVarReturnType = new TypeToken<YtsBaseResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * YTS - Search for a movie (asynchronously)
     * Get the information for a movie from YTS if it is available.
     *
     * @param queryTerm Search by Movie Title/IMDb Code, Actor Name/IMDb Code, Director Name/IMDb Code  (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchYtsAsync(String queryTerm, final ApiCallback<YtsBaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = searchYtsValidateBeforeCall(queryTerm, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<YtsBaseResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
