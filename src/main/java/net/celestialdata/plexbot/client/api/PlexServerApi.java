/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package net.celestialdata.plexbot.client.api;

import net.celestialdata.plexbot.client.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"rawtypes", "DuplicatedCode"})
public class PlexServerApi {
    private ApiClient localVarApiClient;

    public PlexServerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlexServerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for refreshLibraries
     *
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Unauthorized </td><td>  -  </td></tr>
     * </table>
     */
    @SuppressWarnings("ConstantConditions")
    public okhttp3.Call refreshLibrariesCall(final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/library/sections/all/refresh";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames =
                new String[]{"plexAuthToken", "plexClientIdentifier"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    private okhttp3.Call
    refreshLibrariesValidateBeforeCall(final ApiCallback _callback)
            throws ApiException {

        return refreshLibrariesCall(_callback);
    }

    /**
     * PlexServer - Refresh Libraries
     * Scan all media libraries on the Plex server to index new media.Scan all
     * media libraries on the Plex server to index new media.
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Unauthorized </td><td>  -  </td></tr>
     * </table>
     */
    public void refreshLibraries() throws ApiException {
        // If there was an auth failure, reload the auth credentials and try again
        try {
            refreshLibrariesWithHttpInfo();
        } catch (ApiException e) {
            if (e.getCode() == 401) {
                BotClient.refreshClient();
                BotClient.getInstance().refreshPlexServers();
            }
        }
    }

    /**
     * PlexServer - Refresh Libraries
     * Scan all media libraries on the Plex server to index new media.Scan all
     * media libraries on the Plex server to index new media.
     *
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Unauthorized </td><td>  -  </td></tr>
     * </table>
     */
    @SuppressWarnings("UnusedReturnValue")
    public ApiResponse<Void> refreshLibrariesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = refreshLibrariesValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * PlexServer - Refresh Libraries (asynchronously)
     * Scan all media libraries on the Plex server to index new media.Scan all
     * media libraries on the Plex server to index new media.
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 401
     * </td><td> Unauthorized </td><td>  -  </td></tr>
     * </table>
     */
    @SuppressWarnings("unused")
    public okhttp3.Call refreshLibrariesAsync(final ApiCallback<Void> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = refreshLibrariesValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
