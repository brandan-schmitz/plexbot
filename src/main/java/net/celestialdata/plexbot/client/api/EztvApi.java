/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package net.celestialdata.plexbot.client.api;

import com.google.gson.reflect.TypeToken;
import net.celestialdata.plexbot.client.*;
import net.celestialdata.plexbot.client.model.EztvBaseResponse;

import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EztvApi {
    private ApiClient localVarApiClient;

    public EztvApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EztvApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for searchEztv
     *
     * @param imdbId    IMDb ID of the series to get torrents for.  (optional)
     * @param limit     Maximum number of results to list (1-100) (optional)
     * @param page      The page of results to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call searchEztvCall(String imdbId, BigDecimal limit,
                                       BigDecimal page,
                                       final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get-torrents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imdbId != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("imdb_id", imdbId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call
    searchEztvValidateBeforeCall(String imdbId, BigDecimal limit, BigDecimal page,
                                 final ApiCallback _callback)
            throws ApiException {

        okhttp3.Call localVarCall = searchEztvCall(imdbId, limit, page, _callback);
        return localVarCall;
    }

    /**
     * EZTV - Search Torrents
     * Seach EZTV for a show and list the available torrents
     *
     * @param imdbId IMDb ID of the series to get torrents for.  (optional)
     * @param limit  Maximum number of results to list (1-100) (optional)
     * @param page   The page of results to fetch (optional)
     * @return EztvBaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public EztvBaseResponse searchEztv(String imdbId, BigDecimal limit,
                                       BigDecimal page) throws ApiException {
        ApiResponse<EztvBaseResponse> localVarResp =
                searchEztvWithHttpInfo(imdbId, limit, page);
        return localVarResp.getData();
    }

    /**
     * EZTV - Search Torrents
     * Seach EZTV for a show and list the available torrents
     *
     * @param imdbId IMDb ID of the series to get torrents for.  (optional)
     * @param limit  Maximum number of results to list (1-100) (optional)
     * @param page   The page of results to fetch (optional)
     * @return ApiResponse&lt;EztvBaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<EztvBaseResponse>
    searchEztvWithHttpInfo(String imdbId, BigDecimal limit, BigDecimal page)
            throws ApiException {
        okhttp3.Call localVarCall =
                searchEztvValidateBeforeCall(imdbId, limit, page, null);
        Type localVarReturnType = new TypeToken<EztvBaseResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * EZTV - Search Torrents (asynchronously)
     * Seach EZTV for a show and list the available torrents
     *
     * @param imdbId    IMDb ID of the series to get torrents for.  (optional)
     * @param limit     Maximum number of results to list (1-100) (optional)
     * @param page      The page of results to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    searchEztvAsync(String imdbId, BigDecimal limit, BigDecimal page,
                    final ApiCallback<EztvBaseResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                searchEztvValidateBeforeCall(imdbId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<EztvBaseResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
