/*
 * Plexbot
 * Provides all the API functions necessary for the Plexbot to function.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: brandan.schmitz@celestialdata.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package net.celestialdata.plexbot.client.api;

import com.google.gson.reflect.TypeToken;
import net.celestialdata.plexbot.client.*;
import net.celestialdata.plexbot.client.model.CompletionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SyncthingApi {
    private ApiClient localVarApiClient;

    public SyncthingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SyncthingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getCompletionStatus
     *
     * @param folder    ID of the folder to fetch the status of. (required)
     * @param device    ID of the device to fetch the folder status on. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> CSRF Error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCompletionStatusCall(String folder, String device,
                                                final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/db/completion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (folder != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("folder", folder));
        }

        if (device != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("device", device));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept =
                localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"syncthingApiKey"};
        return localVarApiClient.buildCall(
                localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams,
                localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call
    getCompletionStatusValidateBeforeCall(String folder, String device,
                                          final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException(
                    "Missing the required parameter 'folder' when calling getCompletionStatus(Async)");
        }

        // verify the required parameter 'device' is set
        if (device == null) {
            throw new ApiException(
                    "Missing the required parameter 'device' when calling getCompletionStatus(Async)");
        }

        okhttp3.Call localVarCall =
                getCompletionStatusCall(folder, device, _callback);
        return localVarCall;
    }

    /**
     * SyncThing - Get Sync Completion Status
     * Query a SyncThing server to fetch the completition status of a folder on a
     * specific device.
     *
     * @param folder ID of the folder to fetch the status of. (required)
     * @param device ID of the device to fetch the folder status on. (required)
     * @return CompletionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> CSRF Error </td><td>  -  </td></tr>
     * </table>
     */
    public CompletionResponse getCompletionStatus(String folder, String device)
            throws ApiException {
        ApiResponse<CompletionResponse> localVarResp =
                getCompletionStatusWithHttpInfo(folder, device);
        return localVarResp.getData();
    }

    /**
     * SyncThing - Get Sync Completion Status
     * Query a SyncThing server to fetch the completition status of a folder on a
     * specific device.
     *
     * @param folder ID of the folder to fetch the status of. (required)
     * @param device ID of the device to fetch the folder status on. (required)
     * @return ApiResponse&lt;CompletionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> CSRF Error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CompletionResponse>
    getCompletionStatusWithHttpInfo(String folder, String device)
            throws ApiException {
        okhttp3.Call localVarCall =
                getCompletionStatusValidateBeforeCall(folder, device, null);
        Type localVarReturnType = new TypeToken<CompletionResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SyncThing - Get Sync Completion Status (asynchronously)
     * Query a SyncThing server to fetch the completition status of a folder on a
     * specific device.
     *
     * @param folder    ID of the folder to fetch the status of. (required)
     * @param device    ID of the device to fetch the folder status on. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers
     * </td></tr> <tr><td> 200 </td><td> OK </td><td>  -  </td></tr> <tr><td> 403
     * </td><td> CSRF Error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call
    getCompletionStatusAsync(String folder, String device,
                             final ApiCallback<CompletionResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getCompletionStatusValidateBeforeCall(folder, device, _callback);
        Type localVarReturnType = new TypeToken<CompletionResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
